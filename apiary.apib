FORMAT: 1A
HOST: https://api.mycred.io

# CRED-CLAS

API documentation for CRED CLOC As A Service.

## LTV [/ltv]

### Get LTV calculator [GET /api/v1/ltv]

LTV i.e. Loan To Value calculator

+ Request

    + Headers

            Authorization: None

+ Response 200 (application/json)

        [
            {
                "currency": "USD",
                "max_credit": 200000,
                "min_credit": 500,
                "interest_rates": [
                    {
                        "country": "US",
                        "tenor_in_months": 36,
                        "rate": 12.0,
                        "discounts": [
                        {
                            "currency": "LBA",
                            "min_discount": 1.0,
                            "max_discount": 3.0,
                            "discount_step": 1.0
                        }]
                    },
                    {
                        "country": "NON-US",
                        "tenor_in_months": 36,
                        "rate": 15.0,
                        "discounts": [
                        {
                            "currency": "LBA",
                            "min_discount": 1.0,
                            "max_discount": 6.0,
                            "discount_step": 1.0
                        }]
                }],
                "xrp_ltv": 0.33,
                "eth_ltv": 0.33,
                "btc_ltv": 0.33
            }
        ]
            
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
## Users [/users]

User onboarding and management with CRED platform.

### User signup [POST /api/v1/users] 

Sign up a user.

+ Request (application/json)

        {
            "country_code": 1,
            "mobile_number": 4156089756,
            "partner_user_id": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "password": "password",
            "tc_enabled": false,
            "username": "john@mycred.io"
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {
            "user_id": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "email": "john@mycred.io",
            "country_code":"001",
            "mobile": "4153579089",
            "tc_enabled": true,
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            }
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
 
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### User KYC [POST /api/v1/users/user_id/kyc] 

Partner request for user KYC check

+ Parameters:

    + `user_id` (string) - User identifier issued by CRED   

+ Request (application/json)

        {
            "first_name": "John",
            "last_name": "Doe",
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "date_of_birth":"12/31/91",
            "resident": "US" 
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "user_id": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "status": "enabled",
            "kyc": {
                "status": "pending"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"c4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"001",
            "tc_enabled": true,
            "resident": "US", 
            "date_of_birth": "09/10/1995",
            "email": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get user [GET /api/v1/users/user_id]  

Get CRED user by user id. Can be used in polling to check kyc status or user status.

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED 
    

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "user_id": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "status": "enabled",
            "kyc": {
                "status": "success"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"c4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "resident": "US", 
            "date_of_birth": "09/10/1995",
            "email": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
         
            
## Quotes [/quotes]

Quote generation based on available collateral, acceptance and lookup based on generated quote id.

### Create quote request [POST /api/v1/users/user_id/quotes]  

Request quote based on available collateral.

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED


+ Request (application/json)

        {
            "collateral": {
                "btc": 5,
                "eth": 3,
                "xrp": 10
            },
            "currency": "USD",
            "interest_rate_rebates": [{
                "currency": "LBA",
                "percentage": 1
            }],
            "tenor_in_months": 36
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {
            "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "status": "PENDING",
            "msg": "",
            "credit_line": 0,
            "currency": "USD",
            "annual_interest_percent": 0,
            "tenor_in_months": 36,
            "collateral": {
                "btc": 5,
                "eth": 3,
                "xrp": 10
            },
            "discount": 0,
            "interest_rate_rebates": [{
                "currency": "LBA",
                "percentage": 1
            }],
            "expiration_date": "2018-11-11T20:45:55.204+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### Get quote [GET /api/v1/users/user_id/quotes/quote_id]  

Request quote based on quote id.

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED
    + `quote_id` (string) - quote id issued by cred during quote create request.

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {
            "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "status": "APPROVED",
            "msg": "",
            "credit_line": 10000,
            "currency": "USD",
            "annual_interest_percent": 12,
            "tenor_in_months": 36,
            "collateral": {
                "btc": 5,
                "eth": 3,
                "xrp": 10
            },
            "discount": 1,
            "interest_rate_rebates": [{
                "currency": "LBA",
                "percentage": 1
            }],
            "expiration_date": "2018-11-11T20:45:55.000+0000"
        }
        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
   
### Get all user quotes [GET /api/v1/users/user_id/quotes/]  

Request all quote based on user id.

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {
            "content": [{
                "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761",
                "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
                "status": "APPROVED",
                "msg": "",
                "credit_line": 10000,
                "currency": "USD",
                "annual_interest_percent": 12,
                "tenor_in_months": 36,
                "expiration_date": "2018-11-11T20:45:55.000+0000",
                "collateral": {
                    "btc": 5,
                    "eth": 3,
                    "xrp": 10
                },
                "discount": 1,
                "interest_rate_rebates": [{
                    "currency": "LBA",
                    "percentage": 1
                }]
            }],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
   

## CLOC [/cloc]            
            
### Create CLOC request [POST /api/v1/users/user_id/cloc] 

Request for creation of CLOC account for a given user user_id.

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED  

+ Request (application/json)

        {
            "esignature": "34.234.234.23-2018-11-11T20:45:55.000+0000",
            "funding_method": {
                "collateral": [{
                    "id": "95bf494a-9a06-43b0-a0b6-2c3c86f2d2d7",
                    "type": "UPHOLD",
                    "currency": "BTC"
                }],
                 "collection": {
                    "id": "c9ebfc00-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                    },
                "withdrawal": {
                    "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                }
            },
            "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761"
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+ Response 200 (application/json)

        {
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761",
            "status": "PENDING",
            "msg": "",
            "credit_line": 0,
            "annual_interest_percent": 0,
            "tenor_in_months": 0,
            "origination_date": "2018-11-11T20:45:55.000+0000",
            "available_balance": 0,
            "ltv": "0.33",
            "two_day_average_ltv": 0,
            "current_ltv": 0,
            "daily_periodic_rate": 0,
            "daily_withdrawal_limit": 0,
            "over_limit_allowance_amount": 0,
            "over_limit_allowance_count": 0,
            "billing_cycle": null,
            "funding_method": {
                "collateral": [{
                    "id": "95bf494a-9a06-43b0-a0b6-2c3c86f2d2d7",
                    "type": "UPHOLD",
                    "currency": "BTC"
                }],
                 "collection": {
                    "id": "c9ebfc00-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                    },
                "withdrawal": {
                    "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                }
            },
            "fees": {
                "annual_fee": 0,
                "origination_fee": 39,
                "administrative_fee": 0,
                "late_fee": 0,
                "over_limit_fee": 0,
                "returned_payment_fee": 0,
                "exchange_fee": 0
            },
            "collateral": {
                "btc": 5,
                "eth": 3,
                "xrp": 1
            },
            "interest_rate_rebates": [{
                "currency": "LBA",
                "percentage": 1
            }],
            "booking_information": {
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature": "34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
            
### Get CLOC [GET /api/v1/users/user_id/cloc/cloc_id]  

Get CLOC account information by id for a given user

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED  
    + `cloc_id` (string) - cloc account id issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761",
            "status": "ACTIVE",
            "msg": "",
            "credit_line": 10000,
            "annual_interest_percent": 11,
            "tenor_in_months": 36,
            "origination_date": "2018-11-11T20:45:55.000+0000",
            "available_balance": 0,
            "ltv": "0.33",
            "two_day_average_ltv": 0,
            "current_ltv": 0,
            "daily_periodic_rate": 0.2,
            "daily_withdrawal_limit": 3000,
            "over_limit_allowance_amount": 100,
            "over_limit_allowance_count": 2,
            "billing_cycle": null,
            "funding_method": {
                "collateral": [{
                    "id": "95bf494a-9a06-43b0-a0b6-2c3c86f2d2d7",
                    "type": "UPHOLD",
                    "currency": "BTC"
                }],
                 "collection": {
                    "id": "c9ebfc00-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                    },
                "withdrawal": {
                    "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                }
            },
            "fees": {
                "annual_fee": 0,
                "origination_fee": 39,
                "administrative_fee": 0,
                "late_fee": 0,
                "over_limit_fee": 0,
                "returned_payment_fee": 0,
                "exchange_fee": 0
            },
            "collateral": {
                "btc": 5,
                "eth": 3,
                "xrp": 1
            },
            "interest_rate_rebates": [{
                "currency": "LBA",
                "percentage": 1
            }],
            "booking_information": {
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature": "34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get active CLOC account [GET /api/v1/users/user_id/cloc/active]  

Get active CLOC account for a given user identifier

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761",
            "status": "ACTIVE",
            "msg": "",
            "credit_line": 10000,
            "annual_interest_percent": 11,
            "tenor_in_months": 36,
            "origination_date": "2018-11-11T20:45:55.000+0000",
            "available_balance": 0,
            "ltv": "0.33",
            "two_day_average_ltv": 0,
            "current_ltv": 0,
            "daily_periodic_rate": 0.2,
            "daily_withdrawal_limit": 3000,
            "over_limit_allowance_amount": 100,
            "over_limit_allowance_count": 2,
            "billing_cycle": null,
            "funding_method": {
                "collateral": [{
                    "id": "95bf494a-9a06-43b0-a0b6-2c3c86f2d2d7",
                    "type": "UPHOLD",
                    "currency": "BTC"
                }],
                 "collection": {
                    "id": "c9ebfc00-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                    },
                "withdrawal": {
                    "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                }
            },
            "fees": {
                "annual_fee": 0,
                "origination_fee": 39,
                "administrative_fee": 0,
                "late_fee": 0,
                "over_limit_fee": 0,
                "returned_payment_fee": 0,
                "exchange_fee": 0
            },
            "collateral": {
                "btc": 5,
                "eth": 3,
                "xrp": 1
            },
            "interest_rate_rebates": [{
                "currency": "LBA",
                "percentage": 1
            }],
            "booking_information": {
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature": "34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all user CLOC accounts [GET /api/v1/users/user_id/cloc]  

Get all CLOC accounts for a given user identifier

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {
            "content": [{
                "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
                "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
                "quote_id": "95b4bcfb-a961-4b8b-a043-d4f094021761",
                "status": "ACTIVE",
                "msg": "",
                "credit_line": 10000,
                "annual_interest_percent": 11,
                "tenor_in_months": 36,
                "origination_date": "2018-11-11T20:45:55.000+0000",
                "available_balance": 0,
                "ltv": "0.33",
                "two_day_average_ltv": 0,
                "current_ltv": 0,
                "daily_periodic_rate": 0.2,
                "daily_withdrawal_limit": 3000,
                "over_limit_allowance_amount": 100,
                "over_limit_allowance_count": 2,
                "billing_cycle": null,
                "funding_method": {
                    "collateral": [{
                        "id": "95bf494a-9a06-43b0-a0b6-2c3c86f2d2d7",
                        "type": "UPHOLD",
                        "currency": "BTC"
                    }],
                     "collection": {
                        "id": "c9ebfc00-69cb-4b12-bde1-089ef0db1321",
                        "type": "UPHOLD",
                        "currency": "USD"
                        },
                    "withdrawal": {
                        "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                        "type": "UPHOLD",
                        "currency": "USD"
                    }
                },
                "fees": {
                    "annual_fee": 0,
                    "origination_fee": 39,
                    "administrative_fee": 0,
                    "late_fee": 0,
                    "over_limit_fee": 0,
                    "returned_payment_fee": 0,
                    "exchange_fee": 0
                },
                "collateral": {
                    "btc": 5,
                    "eth": 3,
                    "xrp": 1
                },
                "interest_rate_rebates": [{
                    "currency": "LBA",
                    "percentage": 1
                }],
                "booking_information": {
                    "country": "US",
                    "currency": "USD",
                    "timezone": "EST"
                },
                "esignature": "34.234.234.23-2018-11-11T20:45:55.000+0000"
            }],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

## Transactions [/transactions]            
            
### Create transaction request [POST /api/v1/users/user_id/cloc/cloc_id/transactions]  

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED  
    + `cloc_id` (string) - CLOC id issued by cred after cloc CLOC

+ Request (application/json)

        {
            "amount": 1000,
            "currency": "USD",
            "notes": "Withdrawal request",
            "rail": {
                "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "type": "UPHOLD",
                "currency": "USD"
            },
            "type": "WITHDRAWAL"
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "currency": "USD",
            "tx_id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "rail": {
                "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "type": "UPHOLD",
                "currency": "USD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [{
                    "representment_date": "2018-11-11T21:45:00.367Z",
                    "status": "SUCCESS"
                }],
                "settled_date": "2018-11-11T21:45:00.367Z",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Get transaction [GET /api/v1/users/user_id/cloc/cloc_id/transactions/transaction_id]  

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED 
    + `transaction_id` (string) - Transaction id issued by cred after transaction request.
    + `cloc_id` (string) - CLOC id issued by cred after cloc creation


+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "currency": "USD",
            "tx_id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "rail": {
                "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "type": "UPHOLD",
                "currency": "USD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [{
                    "representment_date": "2018-11-11T21:45:00.367Z",
                    "status": "SUCCESS"
                }],
                "settled_date": "2018-11-11T21:45:00.367Z",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
     
### Get all CLOC transactions [GET/api/v1/users/user_id/cloc/cloc_id/transactions]  

+ Parameters:

    + `user_id` (string) - user identifier issued by CRED  
    + `cloc_id` (string) - cloc id issued by cred after cloc creation

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+ Response 200 (application/json)

        {
            "content": [{
                "amount": 1000,
                "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
                "currency": "USD",
                "tx_id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
                "msg": "",
                "notes": "Withdrawal request",
                "rail": {
                    "id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                    "type": "UPHOLD",
                    "currency": "USD"
                },
                "settlement_info": {
                    "created_date": "2018-11-11T21:45:00.367Z",
                    "representments": [{
                        "representment_date": "2018-11-11T21:45:00.367Z",
                        "status": "SUCCESS"
                    }],
                    "settled_date": "2018-11-11T21:45:00.367Z",
                    "status": "SETTLED"
                },
                "status": "SETTLED",
                "transaction_date": "2018-11-11T21:45:00.367Z",
                "type": "WITHDRAWAL",
                "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
            }],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
## Wallets [/wallets]

### Get Deposit Address [GET /api/v1/users/user_id/wallet/deposit/coin_type]

Return deposit address for specified coin and user.
Note this will create a new wallet address if the user passed KYC and conduct deposit for the very first time.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
    + `coin_type` (string) - What coin address required,e.g.,BTC,ETH
    
+ Request (application/json)
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {
            "user_id":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "coin_type":"ETH",
            "address":"0xfe5f141bf94fe84bc28ded0ab966c16b17490657"
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
           
### Get Wallet Balance [GET /api/v1/users/user_id/wallet/balances]

Return wallet balances for given user.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED

+ Request (application/json)
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "user_id":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "balances":[
                {
                    "coin_type":"BTC",
                    "available":1.434343,
                    "collateralized":0.5,
                    "pending_confirm":1
                },
                {
                    "coin_type":"ETH",
                    "available":1.434343,
                    "collateralized":0.5,
                    "pending_confirm":1
                },
                {
                    "coin_type":"LBA",
                    "available":1001123.132,
                    "collateralized":0.5,
                    "staked": 1000,
                    "pending_confirm":1
                }
            ]
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Transfer Coin [POST /api/v1/users/user_id/wallet/transfer/transfer_id]

Apply transfer operation to coin which is already sucessfully deposit but not used, i.e., "available" as returned by above API.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
    + `transfer_id` (string) - invoker to ensure unique transfer id from business perspective
    
+ Request (application/json)

        {
            "transfer_type":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
            "coin_type":"ETH",
            "amount":100.121212212121,
            "withdraw_to":"0xfe5f141bf94fe84bc28ded0ab966c16b17490657"
        }
    
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "user_id":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "coin_type":"ETH",
            "transfer_type":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
            "transfer_id":"biz123"
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
        
### Get Transfer Status [GET /api/v1/users/user_id/wallet/transfer/transfer_id]

Return the status of given user and transfer operation id.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
    + `transfer_id` (string) - invoker to ensure unique transfer id from business perspective

+ Request (application/json)
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "status":"SUBMITTED/PENDING/SUCCESS",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "transfer_id":"biz123",
            "transfer_type":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
            "amount":123.412,
            "coin_type":"ETH",
            "blockchain_tx":"0x7e669efaba276cf087a44d153b789134e565b594b90a2892107ba57e74fb66bf",
            "blockchain_confirmations":20,
            "blockchain_confirmations_required":36
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### Get Transfer History [GET /api/v1/users/user_id/wallet/transfer/history]

Return full transfer history for given user.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
   
+ Request (application/json)

        {
            "transfer_type":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
            "status":"SUBMITTED/PENDING/SUCCESS",
            "coin_type":"ETH"
        }
    
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {            
            "content": 
            [
                  {
                    "status":"SUBMITTED/PENDING/SUCCESS",
                    "user_id":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
                    "transfer_id":"biz123",
                    "transfer_type":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
                    "amount":123.412,
                    "coin_type":"ETH",
                    "blockchain_tx":"0x7e669efaba276cf087a44d153b789134e565b594b90a2892107ba57e74fb66bf",
                    "blockchain_confirmations":20,
                    "blockchain_confirmations_required":36
                  },
                  {
                    "status":"SUBMITTED/PENDING/SUCCESS",
                    "user_id":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
                    "transfer_id":"biz124",
                    "transfer_type":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
                    "amount":123.512,
                    "coin_type":"ETH",
                    "blockchain_tx":"0x9971205df9603993c4484f03a83da34d6915329bc75237904fcdb722a2df2a09",
                    "blockchain_confirmations":20,
                    "blockchain_confirmations_required":36
                  }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        } 
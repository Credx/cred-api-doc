FORMAT: 1A
HOST: https://api.mycred.io

# CRED API

Cred’s comprehensive suite of APIs are designed for everyone looking to build powerful crypto-based financial applications.
The Cred APIs are grouped into four different areas and provide end-to-end functionality.
We support the loan cycle user journey from onboarding to loan origination, disbursement to repayment. Cred even supports wallet management.


## Users [/users]

In order to onboard a user onto the Cred’s platform and apply for C-Loc, we collect basic personal information to create an account.  In addition, to comply with lending regulations in each region, we are obligated to collect additional personal data including an image of a government issued ID to fulfill these requirements.  Partner should only allow member to proceed with C-LOC application if both account status and kyc status are in good standing.

### User signup [POST/api/v1/users] 

The User Signup API is the first step to customer onboarding to collect their basic account information.  This returns a unqiue identifier for each user.  The user_id should be kept on the partner's system for future reference or inquiry for a specific user/account

+ Attributes
    + `uid` (string) - user ID returned from CRED as unique user identifier
    + `user_name` (string) - email address of the member and needs to be unique per member
    + `country_code` (string) - the country code for the member’s mobile number
    + `mobile_number` (number) - mobile phone number of the member
    + `tc_Enabled` (boolean) - To indicate whether the member has agreed to Terms and Conditions as listed on the partner’s site/mobile app. If tc_enabled = false, the user will not be created
    + `partner` (object) - partner parameters returned to partner by Cred
        + `partner_name`
        + `partner_id`
        
+ Request (application/json)

        {
            "user_name": "john@mycred.io"
            "country_code": "+1",
            "mobile_number": "4156089756",
            "partner_user_uuid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "tc_enabled": "true",
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {
            "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "user_name": "john@mycred.io",
            "country_code":"+1",
            "mobile_number": "4153579089",
            "tc_enabled": "true",
            "partner_details": {
                "partner_name":"uphold",
                "partner_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            }
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
 
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### User KYC [POST/api/v1/users/{uid}/kyc] 

The KYC API collects the member’s PIIs for Cred to fulfill our KYC requirements.  Cred is required to perform our own KYC for each CLOC customer. Partner should only allow member to move forward with C-LOC application if both account status and kyc status are in good standing.

+ Parameters
    + `uid` (string) - User uuid issued by CRED   

+ Attributes
    + `uid` (string) - unique user identifier
    + `first_name` (string)
    + `last_name` (string)
    + `status` (string) - Status of the user account. This can be enabled, suspended or disabled
    + `kyc` (object) - personal information submitted to Cred is used to run kyc via third party vendor. this provides details on the verification process
        + `status` (string) - APPROVED, PENDING or DECLINED
    + `address` (object)
        + `line1` (string)
        + `line2` (string)
        + `state` (string)
        + `zip` (string)
        + `country` (string)
    + `partner` (object) - partner parameters returned to partner by Cred
        + `partner_name`
        + `partner_id`   
       
    + `mobile` (number)
    + `country_code` (number)
    + `tc_enabled` (boolean)
    + `dob` (string)
    + `user_name` (string)
    + `resident` (string)
        
        
        
+ Request (application/json)

        {
            "first_name": "John",
            "last_name": "Doe",
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
                        },
            "dob":"12/31/91",
            "document_id":"3456",
            "resident": "US" 
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "first_name": "John",
            "last_name": "Doe",
            "status": "enabled",
            "kyc": {
                "status": "PENDING"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"uphold",
                "partner_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"+1",
            "tc_enabled": "true",
            "dob":"12/31/91",
            "user_name": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
### User KYC Document verification [POST/api/v1/users/{uid}/kyc/verify/documents] 

Customer to submit goverment ID to check for autheticity validation.  This is a part of the KYC service.

+ Parameters
    + `uid` (string) - User id issued by CRED   
+ Attributes   
    + `country_code` (string) - country code of the ID document issuing country 
    + `document` (object)
        + `document_type` (string) - type of document for upload (DriverLicense, Passport, NatoinalID)
        + `document_front_image` (string) - image to be saved as base64imagestring
        + `document_back_image` (string) - image to be saved as base64imagestring

+ Request (application/json)
        {
            {
            "country_code": "US",
            "document": {
                  "document_type": "DriverLicense",
                  "document_front_image": "base64imagestring",
                  "document_back_image": "base64imagestring",
                            }
            }
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "id": "H4a44579-c996-4e30-a7c1-879r",
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get user [GET/api/v1/users/{uid}]  

The user's account status is updated throughout the lifecycle of the account.  This API is used to get the most up-to-date status of the user account.


+ Parameters
    + `uid` (string) - user uuid issued by CRED 

+ Attributes
    + `uid` (string) - unique user identifier
    + `first_name` (string)
    + `last_name` (string)
    + `status` (string) - Status of the user account. This can be enabled, suspended or disabled
    + `kyc` (object) - personal information submitted to Cred is used to run kyc via third party vendor. this provides details on the verification process
        + `status` (string) - APPROVED, PENDING or DECLINED
    + `address` (object)
        + `line1` (string)
        + `line2` (string)
        + `state` (string)
        + `zip` (string)
        + `country` (string)
    + `partner` (object) - partner parameters returned to partner by Cred
        + `partner_name`
        + `partner_id`   
       
    + `mobile` (number)
    + `country_code` (number)
    + `tc_enabled` (boolean)
    + `dob` (string)
    + `user_name` (string)
    + `resident` (string)


+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "first_name": "John",
            "last_name": "Doe",
            "status": "enabled",
            "kyc": {
                "status": "pending"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"+1",
            "tc_enabled": "true",
            "dob":"12/31/91",
            "user_name": "john@mycred.io",
            "resident": "US"   
        }

        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
         


## Loan proposition  [/ltv]
Cred offers customized CLOC programs to meet the needs and requirements of our partners' applications.  All the details of each loan proposition is returned based on your specific partner ID from Cred.
The crypto assets' Fair Market Value (FMV) allows you to calculate the estimated loan amount based on borrowers input (i.e. cryptocurrency type and amount for collateral and the type of fiat interested for the loan)


### Loan proposition [GET/api/v1/ltv/{partner_id}]



+ Parameters

    + `partner_id` - Partner ID issued by CRED  

+ Attributes
    + `currency` (string) - currency of the CLOC 
    + `max_credit` (number) - maximum amount for CLOC offer
    + `min_credit` (number) - minimum amount for CLOC offer
    + `interet_rates` (object) - list of interest profiles for the CLOC available for the partner  
        + `borrower_residence` (string) - US or non-US
        + `tenor_in_months` (number) - the duration of loan term  
        + `rate` (number) - interest rate in percentage
        + `discounts` (object) -  discounted interest rate given to borrower who holds specific amount of utility reservse (currency) at the time of loan origination.  The interest rate would be lowered by discount_step in percentage with each 1% of the utility reserve held.  The discount range is defined by min_discount and max_discount.  For example, for US borrower, they can hold LBA of at least 1% of the principal value of the loan at the time of origination to benefit from reduced interest rate from 12% to 11%.  Borrower can hold up to 3% of LBA of loan amount to get the optimal discounted rate of 9% for their loan. 
            + `discounts: currency` (string) 
            + `min_discount: currency` (string)
            + `max_discount: currency` (string)
            + `discount_step: currency` (string)
    + `eth_ltv` (number) - loan to value ratio for Etherum as collateral
    + `btc_ltv` (number) - loan to value ratio for Bitcoin as collateral
    + `xrp_ltv` (number) - loan to value ratio for Ripple as collateralpdate
    + `fee_response` (object) - all the finance charges related to the CLOC
        +`administrative_fee` (number) 
        +`annual_fee` (number)
        +`exchange_fee_in_percentage` (number) 
        +`late_fee` (number)
        +`origiation_fee_in_percentage` (number) 
        +`over_limit_fee` (number)
        +`returned_payment_fee` (number) 
    + `daily_withdrawal_limit` (number) - daily withdrawal limit for CLOC which borrower must adhere to

    
+ Request

    + Headers

            Authorization: None



+ Response 200 (application/json)

        [  
            {  
                "currency":"USD",
                "max_credit":200000,
                "min_credit":2000,
                "interest_rates":[  
                    {  
                        "borrower_residence":"US",
                        "tenor_in_months":36,
                        "rate":12,
                        "discounts":[  
                            {  
                                "currency":"LBA",
                                "min_discount":1,
                                "max_discount":3,
                                "discount_step":1
                            }
                        ]
                    },
                    {  
                        "borrower_residence":"NON-US",
                        "tenor_in_months":36,
                        "rate":15,
                        "discounts":[  
                            {  
                                "currency":"LBA",
                                "min_discount":1,
                                "max_discount":6,
                                "discount_step":1
                            }
                        ]
                    }
                ],
                "eth_ltv":0.50,
                "btc_ltv":0.50,
                "xrp_ltv":0.50,
                "fees_response": {
                    "administrative_fee":0,
                    "annual_fee":0,
                    "exchange_fee_in_percentage":0,
                    "late_fee":0,
                    "origination_fee_in_percentage":0,
                    "over_limit_fee":0,
                    "returned_payment_fee":0
                },
                "daily_withdrawal_limit": 0,
            }
        ]


+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Fair Market Value of coins [GET/api/v1/oracle/fmv?{convert}=USD&{numberOfCoins}=1&{symbol}=ETH]

+ Parameters
    + convert (required) - Legal money symbol to get fair market value for (ISO 4217 Currency Codes)
    + numberOfCoins (required) - Number of coins intended to pledge for collateral
    + symbol (required) - Coin symbol (BTC, ETH or XRP)

+ Attributes
    + `symbol` (string) - Coin symbol (BTC, ETH or XRP)
    + `convert` (string) - Legal money symbol to get fair market value for (ISO 4217 Currency Codes)
    + `number_of_coins` (number) - Number of coins intended to pledge for collateral
    + `fair_market_value` (number) - Fair market value of pledged collateral

+ Request

    + Headers

            Authorization: None

+ Response 200 (application/json)

        {
            "symbol": "ETH",
            "convert": "USD",
            "number_of_coins": 1,
            "fair_market_value": 113.583
        }


+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

            
## Quotes [/quotes]

A CLOC quote is generated based customer's input on collateral type and amount, loan term, opt-in to hold and others. 
Each CLOC quote is returned with a quoteID for future reference.  The quote is valid for only 3 hours from the time of issue. The customer must read and agree to the loan agreement to proceed furhter.


### Create quote request [POST/api/v1/users/{uuid}/quotes]  

+ Parameters:

    + `uid` (string) - User uuid issued by CRED

+ Request (application/json)

        {  
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "currency":"USD",
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "tenor_in_months":36
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {  
            "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "status":"PENDING",
            "msg":"",
            "credit_line":0,
            "currency":"USD",
            "annual_interest_percent":0,
            "tenor_in_months":36,
            "daily_withdrawal_limit":0,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "fees":{  
                "annual_fee":0,
                "origination_fee_in_percentage":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "discount":0,
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "expiration_date":"2018-11-28T12:17:50.475+0000"
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### Get quote [GET/api/v1/users/uuid/quotes/quoteId]  
Retrieve CLOC quote status (i.e. approved, expired etc) and details using the quoteID returned from POST

+ Parameters:

    + `uid` (string) - User uuid issued by CRED
    + `quoteId` (string) - quoteId issued by cred during quote create request.

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {  
            "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "status":"APPROVED",
            "msg":"",
            "credit_line":2637.742,
            "currency":"USD",
            "annual_interest_percent":14,
            "tenor_in_months":36,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":100,
            "over_limit_allowance_count_per_billing":3,
            "fees":{  
                "annual_fee":0,
                "origination_fee_in_percentage":3,
                "administrative_fee":250,
                "late_fee":39,
                "over_limit_fee":29,
                "returned_payment_fee":30,
                "exchange_fee_in_percentage":1
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "discount":1,
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "expiration_date":"2018-11-28T15:18:04.000+0000"
        }
        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
   
### Get all user quotes [GET/api/v1/users/{uid}/quotes/]  

Request all the quotes for a specific user 

+ Parameters:

    + `uid` (string) - User uuid issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "status":"PENDING",
                    "msg":"",
                    "credit_line":0,
                    "currency":"USD",
                    "annual_interest_percent":0,
                    "tenor_in_months":36,
                    "daily_withdrawal_limit":0,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee_in_percentage":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "discount":0,
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "expiration_date":"2018-11-28T12:17:50.475+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
   

## CLOC [/cloc]            
            
### Create CLOC request [POST/api/v1/users/{uid}/cloc] 

The official CLOC quote should be presented to the customer with all the details including an official loan agreement for them to provide their e-signature.  The loan agreement is a legally binding document and Cred will provide this to the partner to be hosted on their site.
Upon borrower signing the loan agreement, a CLOC contract is generated and a CLOC id is created for reference.  The esignature the concatenation of the user's ipaddress and timestamp at the time of signing.
The immeidate next steps is to allow customer to pledge the collateral and stake the coins per loan agreement.
Collateral - BTC, ref-id where the coins are coming from
Stake - LBA, ref-id where the coins are coming from 
The destination account - withdrawal account
source account - repayment account

+ Parameters

    + `uid` (string)- User uuid issued by CRED  




+ Request (application/json)

        {  
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000",
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ]
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"ACH"
                },
            },
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434"
        }

            
+ Attributes
    + `esignature` (string) - concatenation of IP address and timestamp when user signs the loan agreement.  This is used as official e-signature for the CLOC agreement.
    + `funding_method` - contains all the details for asset transfer
        + `collateral` (object) - contains details on collateral to be pledged to obtain CLOC
            + `currency` (string) - cryptocurrency type to be used for collateral (BTC, ETH, XRP)
            + `ref_id` (string) - reference ID of source wallet address for collateral (i.e. public wallet address or other reference)
            + `transfer_method` (string) - method of cryptocurrency transfer for the collateral (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
        + `stake` (object) - contains details on utility tokens to be held for the discounted interest rate
            + `currency` (string) - utility token (LBA)
            + `ref_id` (string) - reference ID of source wallet address for utility tokens (i.e. public wallet address or other reference)
            + `transfer_method` (string) - method of cryptocurrency transfer for the reserved tokens (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
        + `destination account` (object) - contains details for withdrawal account
            + `currency` (string) - currency for withdrawal for the CLOC
            + `ref_id` (string) - reference ID of customer's withdrawal account (i.e. bank account number, debit card number)
            + `transfer_method` (string) - method for disbursing fiat for CLOC withdrawal (i.e ONUS, ACH, DEBITCARD, SEPA)
        + `source account` (object) - contains details for repayment account
            + `currency` (string) - currency for CLOC repayment
            + `ref_id` (string) - reference ID of customer's repayment account (i.e. bank account number, debit card number)
            + `transfer_method` (string) - method for repayment (i.e ONUS, ACH, DEBITCARD, SEPA)
            
+ Response 200 (application/json)
    + Attributes 
        + `id` (string) - CLOC id generated for reference
        + `uid` (string) - the user ID submitted in the create CLOC request
        + `quote_id` (string) - the quote id and the quote details used to create the CLOC agreement
        + `status` (string) - status of CLOC account (PENDING, ACTIVE, SUSPENDED)
        + `msg` (string) - additional message for notes if the CLOC account is SUSPENDED
        + `credit_line` (number) - credit line amount
        + `credit_line` (number) - credit line amount
        + `credit_line` (number) - credit line amount
        + `credit_line` (number) - credit line amount
        + `credit_line` (number) - credit line amount
        
        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"PENDING",
            "msg":"",
            "credit_line":200000,
            "annual_interest_percent":0,
            "discount":0,
            "tenor_in_months":0,
            "origination_date":"2018-11-28T13:59:16.848+0000",
            "available_credit":0,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":0,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
            
### Get CLOC [GET/api/v1/users/{uuid}/cloc/{clocId}]  

Get CLOC account information by id for a given user

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `clocId` (string) - cloc account id issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get active CLOC account [GET/api/v1/users/{uid}/cloc/active]  

Get active CLOC account for a given user_id

+ Parameters

    + `uid` (string) - User uuid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all user CLOC accounts [GET/api/v1/users/uuid/cloc]  

Get all CLOC accounts for a given user_id

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"f92a6141-c567-469f-af47-d66457722762",
                    "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "status":"ACTIVE",
                    "msg":"",
                    "credit_line":2637.742,
                    "annual_interest_percent":15,
                    "discount":0,
                    "tenor_in_months":36,
                    "origination_date":"2018-11-28T14:03:43.716+0000",
                    "available_credit":2637.742,
                    "ltv":0,
                    "maintenance_ltv":0,
                    "daily_withdrawal_limit":7500,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "billing_cycle":"MONTH",
                    "account_standing":0,
                    "outstanding_balance":0,
                    "principal_outstanding":0,
                    "total_charges":0,
                    "current_cycle_interest":0,
                    "current_cycle_fees":0,
                    "net_current_charges":0,
                    "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
                    "billed_interest":0,
                    "billed_fees":0,
                    "net_billed_charges":0,
                    "funding_method":{  
                        "collateral":[  
                            {  
                                "currency":"BTC",
                                "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"UPHOLD"
                            }
                        ],
                        "destination_account":{  
                            "currency":"USD",
                            "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"UPHOLD"
                        },
                        "source_account":{  
                            "currency":"USD",
                            "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"UPHOLD"
                        },
                        "stake":[  
                            {  
                                "currency":"LBA",
                                "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"UPHOLD"
                            }
                        ]
                    },
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "booking_information":{  
                        "country": "US",
                        "currency": "USD",
                        "timezone": "EST"
                    },
                    "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

## Transactions [/transactions]            
            
### Create withdraw authorization [POST/api/v1/users/uuid/cloc/clocId/transaction/]  

withdraw API allows borrower to draw on their CLOC via the selected mechanism.  Essentially, the borrower is initiating a transfer of funds from their CLOC account into an account/card where they can spend the legal currency.
The desintation account and transfer method specify where to move the funds.

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `clocId` (string) - CLOC id issued by cred after cloc CLOC

+ Request (application/json)

        {  
            "amount":1000,
            "notes":"Sample withdrawal",
            "destination_account":{  
                "currency":"USD",
                "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "transfer_method":"UPHOLD"
            }
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "UPHOLD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Get transaction [GET/api/v1/users/uuid/cloc/clocId/transactions/transactionId]  

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `transactionId` (string) - Transaction id issued by cred after transaction request.
    + `clocId` (string) - CLOC id issued by cred after cloc creation


+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "currency": "USD",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "UPHOLD",
                "currency": "USD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [{
                    "representment_date": "2018-11-11T21:45:00.367Z",
                    "status": "SUCCESS"
                }],
                "settled_date": "2018-11-11T21:45:00.367Z",
                "status": "SUCCESS"
            },
            "status": "SUCCESS",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }


+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Create repayment authorization [POST/api/v1/users/uuid/cloc/clocId/repayment/]  

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `clocId` (string) - CLOC id issued by cred after cloc CLOC

+ Request (application/json)

        {  
            "amount":1000,
            "notes":"Sample Repayment",
            "source_account":{  
                "currency":"USD",
                "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "transfer_method":"UPHOLD"
            }
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "UPHOLD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "REPAYMENT",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all CLOC transactions [GET/api/v1/users/uuid/cloc/clocId/transactions]  

+ Parameters:

    + `uuid` (string)- User uuid issued by CRED  
    + `clocId` (string) - cloc id issued by cred after cloc creation

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+ Response 200 (application/json)

        {
            "content": [
                {
                    "amount": 1000,
                    "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
                    "currency": "USD",
                    "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
                    "msg": "",
                    "notes": "Withdrawal request",
                    "destination_account": {
                        "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                        "transfer_method": "UPHOLD",
                        "currency": "USD"
                    },
                    "settlement_info": {
                        "created_date": "2018-11-11T21:45:00.367Z",
                        "representments": [{
                            "representment_date": "2018-11-11T21:45:00.367Z",
                            "status": "SUCCESS"
                        }],
                        "settled_date": "2018-11-11T21:45:00.367Z",
                        "status": "SUCCESS"
                    },
                    "status": "SUCCESS",
                    "transaction_date": "2018-11-11T21:45:00.367Z",
                    "type": "WITHDRAWAL",
                    "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
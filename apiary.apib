FORMAT: 1A
HOST: https://api-dev.mycred.io

# CRED API

Cred’s comprehensive suite of APIs are designed for everyone looking to build powerful crypto-based financial applications.
The Cred APIs are grouped into four different areas and provide end-to-end functionality.
We support the loan cycle user journey from onboarding to loan origination, disbursement to repayment. Cred even supports wallet management.

Cred introduces Crypto Line of Credit (C-LOC™) to allow your customer to get crypto-backed loans in order to get the liquidity they need. 
When you build your application with our APIs, you instantly get access to our properietary platform to navigate the complexity of blockchain financial services.  The Cred platform uses extensive risk and fraud algorithm and has all the backend pipes to take care of underwriting, KYC, settlement and billing capabilities etc.  You are just one integration away from offering the C-LOC product to your customer to let their crypto grow while offering them flexible access to credit.

## Users [/users]

In order to onboard a user onto the Cred’s platform and apply for C-Loc, we collect basic personal information to create an account.  In addition, to comply with lending regulations in each region, we are obligated to collect additional personal data including an image of a government issued ID to fulfill these requirements.  Partner should only allow member to proceed with C-LOC application if both account status and kyc status are in good standing.

### User signup [POST/api/v1/users] 

The User Signup API is the first step to customer onboarding to collect their basic account information.  This returns a unqiue identifier for each user.  The user id should be kept on the partner's system for future reference or inquiry for a specific user/account
    
+ Request (application/json)

    + Attributes
        + `user_name` (string) - email address of the member and needs to be unique per member
        + `country_code` (number) - the country code for the member’s mobile number
        + `mobile_number` (number) - mobile phone number of the member
        + `tc_Enabled` (boolean) - To indicate whether the member has agreed to Terms and Conditions as listed on the partner’s site/mobile app. If tc_enabled = false, the user will not be created
        
    + Body        
    
            {
                "user_name": "john@mycred.io"
                "country_code": "+1",
                "mobile_number": "4156089756",
                "tc_enabled": "true"
            }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+ Response 200 (application/json)

    + Attributes
        
        + `uid` (string) - user ID returned from CRED as unique user identifier
        + `user_name` (string) - email address of the member and needs to be unique per member
        + `country_code` (string) - the country code for the member’s mobile number
        + `mobile_number` (number) - mobile phone number of the member
        + `tc_Enabled` (boolean) - To indicate whether the member has agreed to Terms and Conditions as listed on the partner’s site/mobile app. If tc_enabled = false, the user will not be created
        
    + Body
    
            {
                "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
                "user_name": "john@mycred.io",
                "country_code":"+1",
                "mobile_number": "4153579089",
                "tc_enabled": "true",
                "partner_details": {
                    "partner_name":"PARTNER_X",
                    "partner_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
                }
            }
            
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
 
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### User KYC [POST/api/v1/users/{uid}/kyc] 

The KYC API collects the member’s PIIs for Cred to fulfill our KYC requirements.  Cred is required to perform our own KYC for each CLOC customer. Partner should only allow member to move forward with C-LOC application if both account status and kyc status are in good standing.

+ Parameters
    + `uid` (string) - User uid issued by CRED   

+ Request (application/json)

    + Attributes
        + `uid` (string) - unique user identifier
        + `first_name` (string)
        + `last_name` (string)
        + `address` (object)
            + `line1` (string)
            + `line2` (string)
            + `state` (string)
            + `zip` (string)
            + `country` (string)
        + `dob` (string) - date of birth in format mm/dd/yy
        + `resident` (string)
            
        
        
    + Body
    
            {
                "first_name": "John",
                "last_name": "Doe",
                "address": {
                    "line1": "487 Cumber Lane",
                    "line2": "Block 5",
                    "state": "CA",
                    "zip": "94105",
                    "country": "USA"
                            },
                "dob":"12/31/91",
                "document_id":"3456",
                "resident": "US" 
            }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "first_name": "John",
            "last_name": "Doe",
            "status": "enabled",
            "kyc": {
                "status": "PENDING"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"partner_example",
                "partner_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"+1",
            "tc_enabled": "true",
            "dob":"12/31/91",
            "user_name": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
### User KYC Document verification [POST/api/v1/users/{uid}/kyc/verify/documents] 

Customer to submit goverment ID to check for autheticity validation.  This is a part of the KYC service.

+ Parameters
    + `uid` (string) - User id issued by CRED   
    

+ Request (application/json)

    + Attributes   
        + `country_code` (string) - country code of the ID document issuing country 
        + `document` (object)
            + `document_type` (string) - type of document for upload (DriverLicense, Passport, NatoinalID)
            + `document_front_image` (string) - image to be saved as base64imagestring
            + `document_back_image` (string) - image to be saved as base64imagestring

        
    + Body
    
            {
                {
                    "country_code": "US",
                    "document": {
                        "document_type": "DriverLicense",
                        "document_front_image": "base64imagestring",
                        "document_back_image": "base64imagestring",
                                }
                }
            }
        
    + Headers
    
            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "id": "H4a44579-c996-4e30-a7c1-879r",
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"ro
        }


### Get user [GET/api/v1/users/{uid}]  

The user's account status is updated throughout the lifecycle of the account.  This API is used to get the most up-to-date status of the user account.


+ Parameters
    + `uid` (string) - user uid issued by CRED 

+ Request (application/json)

    + Attributes
        + `uid` (string) - unique user identifier
        + `first_name` (string)
        + `last_name` (string)
        + `status` (string) - Status of the user account. This can be enabled, suspended or disabled
        + `kyc` (object) - personal information submitted to Cred is used to run kyc via third party vendor. this provides details on the verification process
            + `status` (string) - APPROVED, PENDING or DECLINED
        + `address` (object)
            + `line1` (string)
            + `line2` (string)
            + `state` (string)
            + `zip` (string)
            + `country` (string)
        + `partner` (object) - partner parameters returned to partner by Cred
            + `partner_name`
            + `partner_id`   
           
        + `mobile` (number)
        + `country_code` (number)
        + `tc_enabled` (boolean)
        + `dob` (string)
        + `user_name` (string)
        + `resident` (string)


    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)
        
        {
            "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "first_name": "John",
            "last_name": "Doe",
            "status": "enabled",
            "kyc": {
                "status": "pending"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"partner_example",
                "uid":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"+1",
            "tc_enabled": "true",
            "dob":"12/31/91",
            "user_name": "john@mycred.io",
            "resident": "US"   
        }

        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
         


## Loan proposition  [/ltv]
Cred offers customized CLOC programs to meet the needs and requirements of our partners' applications.  All the details of each loan proposition is returned based on your specific partner ID from Cred.
The crypto assets' Fair Market Value (FMV) allows you to calculate the estimated loan amount based on borrowers input (i.e. cryptocurrency type and amount for collateral and the type of fiat interested for the loan)

### Loan proposition [GET/api/v1/settings/ltv]


+ Request

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l


+ Response 200 (application/json)

    + Attributes

        + `currency` (string) - currency of the CLOC 
        + `max_credit` (number) - maximum amount for CLOC offer
        + `min_credit` (number) - minimum amount for CLOC offer
        + `interet_rates` (object) - list of interest profiles for the CLOC available for the partner  
            + `borrower_residence` (string) - US or non-US
            + `tenor_in_months` (number) - the duration of loan term  
            + `rate` (number) - interest rate in percentage
            + `discounts` (object) -  discounted interest rate given to borrower who holds specific amount of utility reservse (currency) at the time of loan origination.  The interest rate would be lowered by discount_step in percentage with each 1% of the utility reserve held.  The discount range is defined by min_discount and max_discount.  For example, for US borrower, they can hold LBA of at least 1% of the principal value of the loan at the time of origination to benefit from reduced interest rate from 12% to 11%.  Borrower can hold up to 3% of LBA of loan amount to get the optimal discounted rate of 9% for their loan. 
                + `discounts: currency` (string) 
                + `min_discount: currency` (string)
                + `max_discount: currency` (string)
                + `discount_step: currency` (string)
        + `eth_ltv` (number) - loan to value ratio for Etherum as collateral
        + `btc_ltv` (number) - loan to value ratio for Bitcoin as collateral
        + `xrp_ltv` (number) - loan to value ratio for Ripple as collateralpdate
        + `fee_response` (object) - all the finance charges related to the CLOC
            +`administrative_fee` (number) 
            +`annual_fee` (number)
            +`exchange_fee_in_percentage` (number) 
            +`late_fee` (number)
            +`origiation_fee_in_percentage` (number) 
            +`over_limit_fee` (number)
            +`returned_payment_fee` (number) 
        + `daily_withdrawal_limit` (number) - daily withdrawal limit for CLOC which borrower must adhere to

    + Body
    
            { 
                {  
                    "currency":"USD",
                    "max_credit":200000,
                    "min_credit":2000,
                    "interest_rates":[  
                        {  
                            "borrower_residence":"US",
                            "tenor_in_months":36,
                            "rate":12,
                            "discounts":[  
                                {  
                                    "currency":"LBA",
                                    "min_discount":1,
                                    "max_discount":3,
                                    "discount_step":1
                                }
                            ]
                        },
                        {  
                            "borrower_residence":"NON-US",
                            "tenor_in_months":36,
                            "rate":15,
                            "discounts":[  
                                {  
                                    "currency":"LBA",
                                    "min_discount":1,
                                    "max_discount":6,
                                    "discount_step":1
                                }
                            ]
                        }
                    ],
                    "eth_ltv":0.50,
                    "btc_ltv":0.50,
                    "xrp_ltv":0.50,
                    "fees_response": {
                        "administrative_fee":0,
                        "annual_fee":0,
                        "exchange_fee_in_percentage":0,
                        "late_fee":0,
                        "origination_fee_in_percentage":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0
                    },
                    "daily_withdrawal_limit": 0,
                }
            }


+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Fair Market Value of coins [GET/api/v1/oracle/fmv?convert={convert}&numberOfCoins={numberOfCoins}&symbol={symbol}]


+ Parameters
    + convert (required) - Legal money symbol to get fair market value for (ISO 4217 Currency Codes)
    + numberOfCoins (required) - Number of coins intended to pledge for collateral
    + symbol (required) - Coin symbol (BTC, ETH or XRP)

+ Request

    + Headers

            Authorization: None

+ Response 200 (application/json)

    + Attributes
        + `symbol` (string) - Coin symbol (BTC, ETH or XRP)
        + `convert` (string) - Legal money symbol to get fair market value for (ISO 4217 Currency Codes)
        + `number_of_coins` (number) - Number of coins intended to pledge for collateral
        + `fair_market_value` (number) - Fair market value of pledged collateral

    + Body
    
            {
                "symbol": "ETH",
                "convert": "USD",
                "number_of_coins": 1,
                "fair_market_value": 113.583
            }


+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

            
## Quotes [/quotes]

A CLOC quote is generated based customer's input on collateral type and amount, loan term, opt-in to hold and others. 
Each CLOC quote is returned with a quoteID for future reference.  The quote is valid for only 3 hours from the time of issue. The customer must read and agree to the loan agreement to proceed furhter.


### Create quote request [POST/api/v1/users/{uid}/quotes]  

+ Parameters:

    + `uid` (string) - User uid issued by CRED

+ Request (application/json)

        {  
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "currency":"USD",
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "tenor_in_months":36
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {  
            "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "status":"PENDING",
            "msg":"",
            "credit_line":0,
            "currency":"USD",
            "annual_interest_percent":0,
            "tenor_in_months":36,
            "daily_withdrawal_limit":0,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "fees":{  
                "annual_fee":0,
                "origination_fee_in_percentage":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "discount":0,
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "expiration_date":"2018-11-28T12:17:50.475+0000"
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### Get quote [GET/api/v1/users/uid/quotes/quoteId]  
Retrieve CLOC quote status (i.e. approved, expired etc) and details using the quoteID returned from POST

+ Parameters:

    + `uid` (string) - User uid issued by CRED
    + `quoteId` (string) - quoteId issued by cred during quote create request.

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {  
            "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "status":"APPROVED",
            "msg":"",
            "credit_line":2637.742,
            "currency":"USD",
            "annual_interest_percent":14,
            "tenor_in_months":36,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":100,
            "over_limit_allowance_count_per_billing":3,
            "fees":{  
                "annual_fee":0,
                "origination_fee_in_percentage":3,
                "administrative_fee":250,
                "late_fee":39,
                "over_limit_fee":29,
                "returned_payment_fee":30,
                "exchange_fee_in_percentage":1
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "discount":1,
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "expiration_date":"2018-11-28T15:18:04.000+0000"
        }
        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
   
### Get all user quotes [GET/api/v1/users/{uid}/quotes/]  

Request all the quotes for a specific user 

+ Parameters:

    + `uid` (string) - User uid issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "status":"PENDING",
                    "msg":"",
                    "credit_line":0,
                    "currency":"USD",
                    "annual_interest_percent":0,
                    "tenor_in_months":36,
                    "daily_withdrawal_limit":0,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee_in_percentage":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "discount":0,
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "expiration_date":"2018-11-28T12:17:50.475+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
   

## CLOC [/cloc]            
            
### Create CLOC request [POST/api/v1/users/{uid}/cloc] 

Whe customer agrees and wants to proceed with CLOC presented in the official quote.  The official loan agreement would be presented for their e-signature.  The loan agreement is a legally binding document and Cred will provide this to the partner to be hosted on their site.
Upon borrower signing the loan agreement, a CLOC contract is generated and a CLOC id is created for reference.  The esignature is the concatenation of the user's ipaddress and timestamp at the time of signing.
The immeidate next steps is to allow customer to pledge the collateral and stake the coins per loan agreement.  The destination addresses should be presented to the customer for the transfers.


+ Parameters

    + `uid` (string)- User uid issued by CRED  


+ Request (application/json)

    + Attributes
        + `esignature` (string) - concatenation of IP address and timestamp when user signs the loan agreement.  This is used as official e-signature for the CLOC agreement.
        + `funding_method` - contains all the details for asset transfer
            + `collateral` (object) - contains details on collateral to be pledged to obtain CLOC
                + `currency` (string) - cryptocurrency type to be used for collateral (BTC, ETH, XRP)
                + `ref_id` (string) - reference ID of source wallet address for collateral (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the collateral (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `stake` (object) - contains details on utility tokens to be held for the discounted interest rate
                + `currency` (string) - utility token (LBA)
                + `ref_id` (string) - reference ID of source wallet address for utility tokens (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the reserved tokens (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `destination account` (object) - contains details for withdrawal account
                + `currency` (string) - currency for withdrawal for the CLOC
                + `ref_id` (string) - reference ID of customer's withdrawal account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for disbursing fiat for CLOC withdrawal (i.e ONUS, ACH, DEBITCARD, SEPA)
            + `source account` (object) - contains details for repayment account
                + `currency` (string) - currency for CLOC repayment
                + `ref_id` (string) - reference ID of customer's repayment account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for repayment (i.e ONUS, ACH, DEBITCARD, SEPA)

    + Body  
    
            {  
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000",
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ]
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"ACH"
                },
            },
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434"
            }

            

            
+ Response 200 (applicantion/json)
    + Attributes 
        + `id` (string) - CLOC id generated for reference
        + `uid` (string) - the user ID submitted in the create CLOC request
        + `quote_id` (string) - the quote id and the quote details used to create the CLOC agreement
        + `status` (string) - status of CLOC account (PENDING, ACTIVE, SUSPENDED)
        + `msg` (string) - additional message for notes if the CLOC account is SUSPENDED
        + `credit_line` (number) - credit line amount
        + `annual_interest_percent` (number) - 
        + `discount` (number) - 
        + `tenor_in_months` (number) - 
        + `origination_date` (string) - 
        + `available_credit` (number) - 
        + `ltv` (number) - 
        + `maintenace_ltv` (number) - 
        + `annual_interest_percent` (number) - 
        + `daily_withdrawal_limit` (number) - 
        + `over_limit_allowance_amount` (number) - 
        + `over_limit_allowance_count_per_billing` (number) - 
        + `billing_cycle` (string) - MONTHLY 
        + `accounting_standing` (number) -
        + `outstanding_balance` (number) -
        + `principal_standing` (number) -
        + `total_charges` (number) -
        + `current_cycle_interest` (number) -
        + `current_cycle_fees` (number) -
        + `net_current_charges` (number) -
        + `minimum_payment_due_date`(string) - 
        + `billed_interest":0`(string) - 
        + `billed_fees":0`(string) - 
        + `net_billed_charges":0`(string) - 
        + `funding_method` - contains all the details for asset transfer
            + `collateral` (object) - contains details on collateral to be pledged to obtain CLOC
                + `currency` (string) - cryptocurrency type to be used for collateral (BTC, ETH, XRP)
                + `ref_id` (string) - reference ID of source wallet address for collateral (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the collateral (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `stake` (object) - contains details on utility tokens to be held for the discounted interest rate
                + `currency` (string) - utility token (LBA)
                + `ref_id` (string) - reference ID of source wallet address for utility tokens (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the reserved tokens (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `destination account` (object) - contains details for withdrawal account
                + `currency` (string) - currency for withdrawal for the CLOC
                + `ref_id` (string) - reference ID of customer's withdrawal account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for disbursing fiat for CLOC withdrawal (i.e ONUS, ACH, DEBITCARD, SEPA)
            + `source account` (object) - contains details for repayment account
                + `currency` (string) - currency for CLOC repayment
                + `ref_id` (string) - reference ID of customer's repayment account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for repayment (i.e ONUS, ACH, DEBITCARD, SEPA) 
        + `fees` (object) 
                + `annual_fee` (number)
                + `origination_fee` (number)
                + `administrative_fee` (number)
                + `late_fee` (number)
                + `over_limit_fee` (number)
                + `returned_payment_fee` (number)
                + `exchange_fee_in_percentage` (number) 
        + `collateral` (object)  
                + `btc` (number)
                + `eth` (number)
                + `xrp` (number)
        + `interest_rate_rebates` (object)
                + `currency` (string) - LBA
                + "percentage` (number)
        + `booking_information` (object) 
                + `country`(string) - US
                + `currency` (string) - USD
                + `timezone` (string) - EST
        + `esignature` (string) - 
           
    + Body
    
            {  
                "id":"f92a6141-c567-469f-af47-d66457722762",
                "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                "status":"PENDING",
                 "msg":"",
                "credit_line":200000,
                "annual_interest_percent":0,
                "discount":0,
                "tenor_in_months":0,
                "origination_date":"2018-11-28T13:59:16.848+0000",
                "available_credit":0,
                "ltv":0,
                "maintenance_ltv":0,
                "daily_withdrawal_limit":0,
                "over_limit_allowance_amount":0,
                "over_limit_allowance_count_per_billing":0,
                "billing_cycle":"MONTH",
                "account_standing":0,
                "outstanding_balance":0,
                "principal_outstanding":0,
                "total_charges":0,
                "current_cycle_interest":0,
                "current_cycle_fees":0,
                "net_current_charges":0,
                "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
                "billed_interest":0,
                "billed_fees":0,
                "net_billed_charges":0,
                "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
            }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
            
### Get CLOC [GET/api/v1/users/{uid}/cloc/{clocId}]  

Get CLOC account information by id for a given user

+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `clocId` (string) - cloc account id issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"CRED"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"DEBITCARD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get active CLOC account [GET/api/v1/users/{uid}/cloc/active]  

Get active CLOC account for a given user id (uid)

+ Parameters

    + `uid` (string) - User uid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all user CLOC accounts [GET/api/v1/users/uid/cloc]  

Get all CLOC accounts for a given user id (uid)

+ Parameters:

    + `uid` (string) - User uid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"f92a6141-c567-469f-af47-d66457722762",
                    "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "status":"ACTIVE",
                    "msg":"",
                    "credit_line":2637.742,
                    "annual_interest_percent":15,
                    "discount":0,
                    "tenor_in_months":36,
                    "origination_date":"2018-11-28T14:03:43.716+0000",
                    "available_credit":2637.742,
                    "ltv":0,
                    "maintenance_ltv":0,
                    "daily_withdrawal_limit":7500,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "billing_cycle":"MONTH",
                    "account_standing":0,
                    "outstanding_balance":0,
                    "principal_outstanding":0,
                    "total_charges":0,
                    "current_cycle_interest":0,
                    "current_cycle_fees":0,
                    "net_current_charges":0,
                    "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
                    "billed_interest":0,
                    "billed_fees":0,
                    "net_billed_charges":0,
                    "funding_method":{  
                        "collateral":[  
                            {  
                                "currency":"BTC",
                                "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"CRED"
                            }
                        ],
                        "stake":[  
                            {  
                                "currency":"LBA",
                                "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"DEBITCARD"
                            }
                        ],
                        "destination_account":{  
                            "currency":"USD",
                            "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"CRED"
                        },
                        "source_account":{  
                            "currency":"USD",
                            "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"DEBITCARD"
                        },
                        
                    },
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "booking_information":{  
                        "country": "US",
                        "currency": "USD",
                        "timezone": "EST"
                    },
                    "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

## Transactions [/transactions]    

Customer should have the capability be able to withdraw from their CLOC and do repayment at any time.  These transction APIs allow you to facilitate these actions direclty from your platform.

            
### Create withdraw authorization [POST/api/v1/users/{uid}/cloc/{clocId}/transaction/]  
This allows customer to withdraw from their CLOC into their designated account. The withdrawal authorization is submitted to Cred to run all through all authorization checks and move funds from the customer's CLOC account into their designated bank/card.  The available credit would be deducted according once transaction is successfully authorized and settled.
Partner is encouraged to use GET CLOC request to update CLOC account status in order for customer to have most-to-date CLOC account status

+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `clocId` (string) - CLOC id issued by cred after cloc CLOC

+ Request (application/json)

    + Attributes
        + `amount` (number) - Amount to be withdrawal from CLOC account  
        + `notes` (string) - optional note
        + `destination_account` (object)
            + `currency` (string) - currency of the withdrawal funds
            + `ref_id` (string) - reference id of the account to transfer to withdrawal amount into
            + `transfer_method` (string) - method for withdrawal (i.e ONUS, ACH, DEBITCARD, SEPA)
            
    + Body

            {  
                "amount":1000,
                "notes":"Sample withdrawal",
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "transfer_method":"DEBITCARD"
                }
            }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "DEBITCARD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Get transaction [GET/api/v1/users/uid/cloc/clocId/transactions/transactionId]  

+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `transactionId` (string) - Transaction id issued by cred after transaction request.
    + `clocId` (string) - CLOC id issued by cred after cloc creation


+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "currency": "USD",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "DEBITCARD",
                "currency": "USD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [{
                    "representment_date": "2018-11-11T21:45:00.367Z",
                    "status": "SUCCESS"
                }],
                "settled_date": "2018-11-11T21:45:00.367Z",
                "status": "SUCCESS"
            },
            "status": "SUCCESS",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }


+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Create repayment authorization [POST/api/v1/users/uid/cloc/clocId/repayment/]  
This allows customer to do repayments for their CLOC from their designated account. The repayment authorization is submitted to Cred to run through all authorization checks prior settlement.  When repayment is succesful, the available credit would increase accordingly and be made available to the customer.  
At the end of each month, customer would be auto-debited from the designated account for the total interest and fee accrued from.  The customer should always have an option to make additional payment for off-cycle payments.  Both on-cycle and off-cycle repayments can be done using the same API.


+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `clocId` (string) - CLOC id issued by cred after cloc CLOC

+ Request (application/json)

        {  
            "amount":1000,
            "notes":"Sample Repayment",
            "source_account":{  
                "currency":"USD",
                "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "transfer_method":"DEBITCARD"
            }
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "DEBITCARD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "REPAYMENT",
            "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all CLOC transactions [GET/api/v1/users/uid/cloc/clocId/transactions]  

+ Parameters:

    + `uid` (string)- User uid issued by CRED  
    + `clocId` (string) - cloc id issued by cred after cloc creation

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+ Response 200 (application/json)

        {
            "content": [
                {
                    "amount": 1000,
                    "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
                    "currency": "USD",
                    "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
                    "msg": "",
                    "notes": "Withdrawal request",
                    "destination_account": {
                        "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                        "transfer_method": "DEBITCARD",
                        "currency": "USD"
                    },
                    "settlement_info": {
                        "created_date": "2018-11-11T21:45:00.367Z",
                        "representments": [{
                            "representment_date": "2018-11-11T21:45:00.367Z",
                            "status": "SUCCESS"
                        }],
                        "settled_date": "2018-11-11T21:45:00.367Z",
                        "status": "SUCCESS"
                    },
                    "status": "SUCCESS",
                    "transaction_date": "2018-11-11T21:45:00.367Z",
                    "type": "WITHDRAWAL",
                    "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
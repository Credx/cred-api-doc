FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# CRED-CLAS

## LTV [/ltv]

### Loan to value collection [GET/api/v1/ltv]

Get Loan to value collection based on geography.
+ Request

    + Headers

            Authorization: Basic ABC123

+ Response 200 (application/json)
       
        {
            "credit_line": {
                "min":"500",
                "max":"200000",
                "currency":"USD"
            },
            "fees": {
                "origination_fee_percent":"3"
            },
            "ltv":[
            
            
                {
                    "loan_duration_in_months": "36",
                    "annual_interest_percent": "12",
                    "state": "CA",
                    "country": "US",
                    "currencies": [{
                        "currency": "BTC",
                        "percent": "33"
                    }, {
                        "currency": "ETH",
                        "percent": "40"
                    }],
                    "annual_interest_discount": [{
                        "currency": "LBA",
                        "discount_percent_min": "1",
                        "discount_percent_max": "3",
                        "credit_line_buy_percent_increment": "1"
                    }, {
                        "currency": "UPUSD",
                        "discount_percent_min": "1",
                        "discount_percent_max": "3",
                        "credit_line_buy_percent_increment": "1"
                    }]
                },
                {
                    "loan_duration_in_months": "18",
                    "annual_interest_percent": "15",
                    "state": "CA",
                    "country": "US",
                    "currencies": [{
                        "currency": "BTC",
                        "percent": "33"
                    }, {
                        "currency": "ETH",
                        "percent": "40"
                    }],
                    "annual_interest_discount": [{
                        "currency": "LBA",
                        "discount_percent_min": "1",
                        "discount_percent_max": "6",
                        "credit_line_buy_percent_increment": "1"
                    }, {
                        "currency": "UPUSD",
                        "discount_percent_min": "1",
                        "discount_percent_max": "6",
                        "credit_line_buy_percent_increment": "1"
                    }]
                }
        ]
        }
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"  
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }
        
## Onboarding [/users]

User onboarding with CRED platform including kyc.

### user signup [POST/api/v1/users] 

Sign up a partner user.

Required attributes: 

- `email`
- `mobile`

Optional attributes:

- `partner_user_id`


+ Request (application/json)

        Body
        {
            "email":"john@mycred.io",
            "partner_user_id":"10",
            "mobile":"4153579089"
        }
    + Headers

            Authorization: Basic ABC123
            
+ Response 200 (application/json)

        {
            "id": "1",
            "email": "john@mycred.io",
            "mobile": "4153579089",
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"10"
            }
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
 
        {
            "error": "Bad request",
            "code" : "400"
        }            
        
### user kyc [POST/api/v1/users/{id}/kyc]  

Request partner user KYC check

Parameters:
- `id` (number) - user id issued by cred in the form of an integer  

Required attributes: 

- `resident`
- `first-name`          
- `last-name`
- `address`


+ Request (application/json)

        Body    
        {
            "first_name": "John",
            "last_name": "Doe",
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "resident": "US" 
        }
    + Headers

            Authorization: Basic ABC123
            
            
+   Response 200 (application/json)

        {
            "id": "1",
            "status": "enabled",
            "kyc": {
                "status": "pending"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"10"
            },
            "mobile": "4150689089",
            "resident": "US", 
            "birthdate": "09/10/1995",
            "email": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }                       

### user by id [GET/api/v1/users/{id}]  

Get CRED user by userId. Can be used in polling to check kyc status or user status.

Parameters:
- `id` (number) - user id issued by cred in the form of an integer  
    

+ Request (application/json)

    + Headers

            Authorization: Basic ABC123
            
    
+   Response 200 (application/json)

        {
            "id": "1",
            "status": "enabled",
            "kyc": {
                "status": "success" 
            },
             "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"10"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "mobile": "4150689089",
            "resident": "US", 
            "birthdate": "09/10/1995",
            "email": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }                       
            
## Quotes [/quotes]

Quote generation based on available collateral, acceptance and lookup based on generated quoteId.

### Quote [POST/api/v1/users/{id}/quotes]  

Request quote based on available collateral.

Parameters:
- `id` (number) - user id issued by cred in the form of an integer  


Required attributes: 
- `Collateral` - List of collateral object each containing currency and quantity.


+ Request (application/json)

        Body
        {
          "collateral": [{
            "currency": "ETH",
            "quantity": "100"
           }, {
            "currency": "BTC",
            "quantity": "19.9"
           }],
           "annual_rate_discount": {
                "currency":"LBA",
                "credit_line_buy_percent":"3"
           }
        }
        
    + Headers

            Authorization: Basic ABC123
            
   
+ Response 200 (application/json)

        {
            "id": "2"
        }
        
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }                       
            
### Quote by id [GET/api/v1/users/{id}/quotes/{quoteId}]  

Request quote based on quote id, can be used for polling quote.

Parameters:
- `id` (number) - user id issued by cred in the form of an integer
- `quoteId` (number) - quoteId issued by cred during quote create request.

+ Request (application/json)


    + Headers

            Authorization: Basic ABC123
            

+   Response 200 (application/json)

        {
          "id": "2",
          "amount": "10000",
          "currency": "USD", 
          "annual_interest_percent": "9",
          "duration": "36", 
          "ttl": "10800", 
          "collateral": [{
            "currency": "BTC",
            "quantity": "19.9"
          }, {
            "currency": "ETH",
            "quantity": "100"
          }],
          "annual_interest_discount": {
                "currency":"LBA",
                "discount_percent_max":"3",
                "currency_required_amount":"6000",
                "currency_rate":"0.05"
          }
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }                       
            
### Quote Terms by id [GET/api/v1/users/{id}/quotes/{quoteId}/terms?locale=en-US]  

Get quote terms generated by CRED for a given user.

Parameters:
- `id` (number) - user id issued by cred in the form of an integer
- `quoteId` (number) - quoteId issued by cred during quote create request.

+ Request (application/json)

    + Headers

            Authorization: Basic ABC123
            
    
+   Response 200 (application/json)

        {
            "agreement": "<Legal Text>"
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"  
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }            
            
## CLOC [/cloc]            
            
### CLOC [POST/api/v1/users/{id}/cloc] 

CLOC creation for a given user id.

Required attributes: 
- `settings` - settings object containing collateral withdrawl and funds collections details.

Parameters:
- `id` (number) - user id issued by cred in the form of an integer
- `quoteId` (number) - quoteId issued by cred during quote create request.

+ Request (application/json)

    Body
    {
        "quote_id": "2",
        "settings": {
            "collateral": 
            [{
                "id": "11",
                "type": "uphold-card"
                }, {
                "id": "12",
                "type": "uphold-card"
            }],
            "collection": 
            [{
                "id": "13",
                "type": "uphold-card"
            }, {
                "id": "14",
                "type": "uphold-card"
            }],
            "withdrawal": {
                "id": "15",
                "type": "uphold-card"
            },
            "annual_rate_discount": {
                 "id": "16",
                "type": "lba or upusd uphold-card"
            }
        
        },
        "ip": "john.doe.127.0.0.0.1"
    }
        
    + Headers

            Authorization: Basic ABC123
            
    + Parameters
        + id (number) - user id issued by cred in the form of an integer

+ Response 200 (application/json)

        {
            "id": "3"
        }

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected" 
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }                       
            
### CLOC by id [GET/api/v1/users/{id}/cloc/{clocId}]  

Get CLOC by given id for a given user id

Parameters:
- `id` (number) - user id issued by cred in the form of an integer
- `clocId` (number) - cloc id issued by cred in the form of an integer

+ Request (application/json)

    + Headers

            Authorization: Basic ABC123
            
   
+ Response 200 (application/json)

        {
              "id": "3",
              "status": "active", 
              "created_at": "2018-10-1014:00:00",
              "interest_rate": "8",
              "available": "1000", 
              "balance": "1000", 
              "currency": "USD"
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }            
            
### Get CLOC List [GET/api/v1/users/{id}/cloc]  

Get CLOC list for a given user id

Parameters:
- `id` (number) - user id issued by cred in the form of an integer

+ Request (application/json)

    + Headers

            Authorization: Basic ABC123
            
   
+ Response 200 (application/json)

        [
            {
              "id": "3",
              "status": "active", 
              "created_at": "2018-10-1014:00:00",
              "interest_rate": "8", 
              "available": "1000", 
              "balance": "1000", 
              "currency": "USD"
            }
        ]
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }            
                        
            
### CLOC close [GET/api/v1/users/{id}/cloc/{clocId}/close]  

Parameters:

- `id` (number) - user id issued by cred in the form of an integer
- `clocId` (number) - cloc id issued by cred after cloc creation

+ Request (application/json)

    + Headers

            Authorization: Basic ABC123
            
    
+ Response 200 (application/json)

        {
              "id":"3"
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected" 
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }                       
            
## Transactions [/transactions]            
            
### Transactions [POST/api/v1/users/{id}/cloc/{clocId}/transactions]  

Parameters:

- `id` (number) - user id issued by cred in the form of an integer
- `clocId` (number) - cloc id issued by cred after cloc creation


+ Request (application/json)

        Body
        {
            "amount": "100" // string
            "type": "withdrawl" // ["repayment", "withdrawal"]
            "source": { // deposit to this card
                "id": "11",
                "type": "uphold-card"
             }
                  
        }

    + Headers

            Authorization: Basic ABC123
            
    + Parameters
        + id (number) - user id issued by cred in the form of an integer
        + clocId (number) - cloc id issued by cred after cloc creation
        
+ Response 200 (application/json)

        {
            "id": "4"
        }
        
### Transactions by id [GET/api/v1/users/{id}/cloc/{clocId}/transactions/{transactionId}]  

- `id` (number) - user id issued by cred in the form of an integer
- `transactionId` (number) - transaction id issued by cred after transaction request.
- `clocId` (number) - cloc id issued by cred after cloc creation


+ Request (application/json)

    + Headers

            Authorization: Basic ABC123

+ Response 200 (application/json) 

        
        [
            {
              "id": "4", 
              "status": "success", 
              "type": "repayment", 
              "reason": "",  
              "amount": "100", 
              "currency": "USD",
              "source": {
                "id": "5",
                "type": "uphold-card"
              }
            }
        ]
        
        
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"     
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }            
                                
### Transactions by CLOC id [GET/api/v1/users/{id}/cloc/{clocId}/transactions]  

- `id` (number) - user id issued by cred in the form of an integer
- `clocId` (number) - cloc id issued by cred after cloc creation

+ Request (application/json)

    + Headers

            Authorization: Basic ABC123
            
   
+ Response 200 (application/json) 

        {
        
            
              "id": "45-FF", 
              "status": "success",  
              "type": "repayment", 
              "reason": "", 
              "amount": "100", 
              "currency": "USD",
              "source": {
                "id": "5",
                "type": "uphold-card"
              }
           
        
        }
        
+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"
            
+ Response 400
    
        {
            "error": "Bad request",
            "code" : "400"
        }
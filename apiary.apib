FORMAT: 1A
HOST: https://api-dev.mycred.io

# CRED API

CredX comprehensive suite of APIs are designed for everyone looking to build powerful crypto-based financial applications.  CredX APIs are grouped into multiple logical areas and provide for all-inclusive set of required capabilities. Altogether exposed service modules account for entire user journey from onboarding to service origination, funds disbursement to repayment, service propositioning to reporting.  In addition, CredX APIs support all relevant wallet management functions, including collateral custody governance.

First fully developed array of modules available for application development is CredX innovative proposition of Crypto equity Line of Credit or C-LOC™.  Crypto equity Line of Credit is a REVOLVING loan offering in which the funder agrees to lend a maximum amount within an agreed period of time, where the collateral is the borrower's equity in his/her crypto assets.  

As we continue to evolve, we will be sharing other innovative services to enable our partners to build full spectrum of crypto based financial services software packages including investing, insurance, payment processing and other banking services.

## Users [/users]

In order to create a user on CredX platform and provision financial services applications, like C-LOC™, Cred needs to collect and verify user identity information.  This ensures compliance with KYC/AML regulations.  CredX platform operates as a gateway to global and local KYC bureaus to allow for widest possible geographical coverage in documents and identity verification.

### User signup [POST/api/v1/users] 

User Signup API is the first step to user onboarding. This API returns a unique identifier for each user. Thus shared user id should be kept on the partner's system for future referencing or inquiries relating to user/account profile and activity.
    
+ Request (application/json)

    + Attributes
        + `user_name` (string) - email address of the member and needs to be unique per member
        + `country_code` (number) - the country code for the member’s mobile number
        + `mobile_number` (number) - mobile phone number of the member
        + `tc_Enabled` (boolean) - To indicate whether the member has agreed to Terms and Conditions as listed on the partner’s site/mobile app. If tc_enabled = false, the user will not be created
        
    + Body        
    
            {
                "user_name": "john@mycred.io"
                "country_code": "+1",
                "mobile_number": "4156089756",
                "tc_enabled": "true"
            }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+ Response 200 (application/json)

    + Attributes
        
        + `uid` (string) - user ID returned from CRED as unique user identifier
        + `user_name` (string) - email address of the member and needs to be unique per member
        + `country_code` (string) - the country code for the member’s mobile number
        + `mobile_number` (number) - mobile phone number of the member
        + `tc_Enabled` (boolean) - To indicate whether the member has agreed to Terms and Conditions as listed on the partner’s site/mobile app. If tc_enabled = false, the user will not be created
        
    + Body
    
            {
                "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
                "user_name": "john@mycred.io",
                "country_code":"+1",
                "mobile_number": "4153579089",
                "tc_enabled": "true",
                "partner_details": {
                    "partner_name":"PARTNER_X",
                    "partner_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
                }
            }
            
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
 
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### User KYC [POST/api/v1/users/{uid}/kyc] 

User KYC API triggers adjudication process of user’s personal identification information (PII) as part of fulfilling KYC obligations.  No financial services proposition can be offered to a user that did not pass CredX KYC adjudication.  A partner should strictly allow only KYC-ed users to progress with CredX enabled financial services applications, like C-LOC™.

+ Parameters
    + `uid` (string) - User uid issued by CRED   

+ Request (application/json)

    + Attributes
        + `first_name` (string)
        + `last_name` (string)
        + `address` (object)
            + `line1` (string)
            + `line2` (string)
            + `state` (string)
            + `zip` (string)
            + `country` (string)
        + `dob` (string) - date of birth in format mm/dd/yy
        + `resident` (string)
            
        
        
    + Body
    
            {
                "first_name": "John",
                "last_name": "Doe",
                "address": {
                    "line1": "487 Cumber Lane",
                    "line2": "Block 5",
                    "state": "CA",
                    "zip": "94105",
                    "country": "USA"
                            },
                "dob":"12/31/91",
                "document_id":"3456",
                "resident": "US" 
            }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "first_name": "John",
            "last_name": "Doe",
            "status": "enabled",
            "kyc": {
                "status": "PENDING"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"partner_example",
                "partner_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"+1",
            "tc_enabled": "true",
            "dob":"12/31/91",
            "user_name": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
### Document verification [POST/api/v1/users/{uid}/kyc/verify/documents] 

Document verification API is part of user comprehensive KYC adjudication.  Submitted government issued ID will be fully authenticated through CredX to allow for completion of KYC process.

+ Parameters
    + `uid` (string) - User id issued by CRED   
    

+ Request (application/json)

    + Attributes   
        + `country_code` (string) - country code of the ID document issuing country 
        + `document` (object)
            + `document_type` (string) - type of document for upload (DriverLicense, Passport, NatoinalID)
            + `document_front_image` (string) - image to be saved as base64imagestring
            + `document_back_image` (string) - image to be saved as base64imagestring

        
    + Body
    
            {
                {
                    "country_code": "US",
                    "document": {
                        "document_type": "DriverLicense",
                        "document_front_image": "base64imagestring",
                        "document_back_image": "base64imagestring",
                                }
                }
            }
        
    + Headers
    
            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "id": "H4a44579-c996-4e30-a7c1-879r",
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"ro
        }


### Get user [GET/api/v1/users/{uid}]  

The user's account status is updated throughout the lifecycle of the account.  This API is used to get the most up-to-date status of the user account.


+ Parameters
    + `uid` (string) - user uid issued by CRED 

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

    + Attributes
        + `first_name` (string)
        + `last_name` (string)
        + `status` (string) - Status of the user account. This can be enabled, suspended or disabled
        + `kyc` (object) - personal information submitted to Cred is used to run kyc via third party vendor. this provides details on the verification process
            + `status` (string) - APPROVED, PENDING or DECLINED
        + `address` (object)
            + `line1` (string)
            + `line2` (string)
            + `state` (string)
            + `zip` (string)
            + `country` (string)
        + `partner` (object) - partner parameters returned to partner by Cred
            + `partner_name`
            + `partner_id`   
           
        + `mobile` (number)
        + `country_code` (number)
        + `tc_enabled` (boolean)
        + `dob` (string)
        + `user_name` (string)
        + `resident` (string)
        
    + Body
    
            {
                "uid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
                "first_name": "John",
                "last_name": "Doe",
                "status": "enabled",
                "kyc": {
                    "status": "pending"
                },
                "address": {
                    "line1": "487 Cumber Lane",
                    "line2": "Block 5",
                    "state": "CA",
                    "zip": "94105",
                    "country": "USA"
                },
                "partner_details": {
                    "partner_name":"partner_example",
                    "uid":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
                },
                "mobile": "4150689089",
                "country_code":"+1",
                "tc_enabled": "true",
                "status":"enabled",
                "dob":"12/31/91",
                "user_name": "john@mycred.io",
                "resident": "US"   
            }

        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
         


## Loan proposition  [/ltv]
Loan proposition API provides detailed and up to day information on the offering for a particular financial application, like  a C-LOC™, in this case.  Details, such as effective Interest Rate, Tenor, Origination Fee, Fair Market Value of crypto-collateral and other proposition components are returned to a partner to help build customized loan calculator.

### Loan proposition [GET/api/v1/settings/ltv]


+ Request

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l


+ Response 200 (application/json)

    + Attributes
        + `currency` (string) - currency of the C-LOC 
        + `max_credit` (number) - maximum amount for C-LOC offer
        + `min_credit` (number) - minimum amount for C-LOC offer
        + `interet_rates` (object) - list of interest profiles for the C-LOC available for the partner  
            + `borrower_residence` (string) - US or non-US
            + `tenor_in_months` (number) - the duration of loan term  
            + `rate` (number) - interest rate in percentage
            + `discounts` (object) -  discounted interest rate given to borrower who holds specific amount of utility reservse (currency) at the time of loan origination.  The interest rate would be lowered by discount_step in percentage with each 1% of the utility reserve held.  The discount range is defined by min_discount and max_discount.  For example, for US borrower, they can hold LBA of at least 1% of the principal value of the loan at the time of origination to benefit from reduced interest rate from 12% to 11%.  Borrower can hold up to 3% of LBA of loan amount to get the optimal discounted rate of 9% for their loan. 
                + `discounts: currency` (string) 
                + `min_discount: currency` (string)
                + `max_discount: currency` (string)
                + `discount_step: currency` (string)
        + `eth_ltv` (number) - loan to value ratio for Etherum as collateral
        + `btc_ltv` (number) - loan to value ratio for Bitcoin as collateral
        + `xrp_ltv` (number) - loan to value ratio for Ripple as collateralpdate
        + `fee_response` (object) - all the finance charges related to the C-LOC
            +`administrative_fee` (number) 
            +`annual_fee` (number)
            +`exchange_fee_in_percentage` (number) 
            +`late_fee` (number)
            +`origiation_fee_in_percentage` (number) 
            +`over_limit_fee` (number)
            +`returned_payment_fee` (number) 
        + `daily_withdrawal_limit` (number) - daily withdrawal limit for C-LOC which borrower must adhere to

    + Body
    
            { 
                {  
                    "currency":"USD",
                    "max_credit":200000,
                    "min_credit":2000,
                    "interest_rates":[  
                        {  
                            "borrower_residence":"US",
                            "tenor_in_months":36,
                            "rate":12,
                            "discounts":[  
                                {  
                                    "currency":"LBA",
                                    "min_discount":1,
                                    "max_discount":3,
                                    "discount_step":1
                                }
                            ]
                        },
                        {  
                            "borrower_residence":"NON-US",
                            "tenor_in_months":36,
                            "rate":15,
                            "discounts":[  
                                {  
                                    "currency":"LBA",
                                    "min_discount":1,
                                    "max_discount":6,
                                    "discount_step":1
                                }
                            ]
                        }
                    ],
                    "eth_ltv":0.50,
                    "btc_ltv":0.50,
                    "xrp_ltv":0.50,
                    "fees_response": {
                        "administrative_fee":0,
                        "annual_fee":0,
                        "exchange_fee_in_percentage":0,
                        "late_fee":0,
                        "origination_fee_in_percentage":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0
                    },
                    "daily_withdrawal_limit": 0,
                }
            }


+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Fair Market Value of coins [GET/api/v1/oracle/fmv?convert={convert}&numberOfCoins={numberOfCoins}&symbol={symbol}]


+ Parameters
    + convert (required) - Legal money symbol to get fair market value for (ISO 4217 Currency Codes)
    + numberOfCoins (required) - Number of coins intended to pledge for collateral
    + symbol (required) - Coin symbol (BTC, ETH or XRP)

+ Request

    + Headers

            Authorization: None

+ Response 200 (application/json)

    + Attributes
        + `symbol` (string) - Coin symbol (BTC, ETH or XRP)
        + `convert` (string) - Legal money symbol to get fair market value for (ISO 4217 Currency Codes)
        + `number_of_coins` (number) - Number of coins intended to pledge for collateral
        + `fair_market_value` (number) - Fair market value of pledged collateral

    + Body
    
            {
                "symbol": "ETH",
                "convert": "USD",
                "number_of_coins": 1,
                "fair_market_value": 113.583
            }


+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

            
## Quotes [/quotes]

This API triggers official quote generation based on borrower’s specified loan requirements, such as  collateral type, desired credit limit, expressed interest to stake utility coins and other loan customizing parameters. Each C-LOC™ quote is returned with a quoteID for future referencing. Thus generated quote has a validity of 3 hours from the time of issue.  For a valid loan account to be originated it is within the next 3 hours the returned quote will need to be accepted by a borrower, borrower’s collateral to be transferred to Cred and Cred loan agreement to be electronically signed.
 
### Create quote request [POST/api/v1/users/{uid}/quotes]  

+ Parameters

    + `uid` (string) - User uid issued by CRED

+ Request (application/json)

    + Attributes
        + `collateral` (object) - number of coin for each cryptocurrency to be pleged as colalteral.  currently, we support BTC, ETH, and XRP
            + `btc` (number)
            + `eth` (number)
            + `xrp` (number)
        + `currency` (string) - the currency which customer wants to get a loan in (i.e. USD)
        + `interest_rate_rebates` (object) - the type and number of utility token to stake for discounted C-LOC interest rate
            + `currency` (string) - type of utiltiy token for staking (i.e. LBA)
            + `percentage` (number) - percentage of total loan amount for staking
        + tenor_in_months (number) - loan term in number of months
            
    + Body
    
            {  
                "collateral":{  
                    "btc":2,
                    "eth":1,
                    "xrp":0
                },
                "currency":"USD",
                "interest_rate_rebates":[  
                    {  
                        "currency":"LBA",
                        "percentage":1
                    }
                ],
                "tenor_in_months":36
            }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

    + Attributes
        + `id` (string) - quote ID returned for reference
        + `uid` (string) - the user ID for which this quote is created for
        + `status` (string) - status of the C-LOC quote (PENDING, EXPIRED, INACTIVE)
        + `credit_line` (number) - 
        + `currency` (string) - the currency which customer wants to get a loan in (i.e. USD)
        + `annual_interest_percent` (number) 
        + `tenor_in_months` (number) 
        + `daily_withdrawal_limit` (number) 
        + `over_limit_allowance_amount` (number) 
        + `over_limit_allowance_count_per_billing` (number) 
        + `fee` (object) 
            + `annual_fee` (number) 
            + `origination_fee_in_percentage` (number) 
            + `administrative_fee` (number) 
            + `late_fee` (number) 
            + `over_limit_fee` (number) 
            + `returned_payment_fee` (number) 
            + `exchange_fee_in_percentage` (number) 
        + `collateral` (object) - number of coin for each cryptocurrency to be pleged as colalteral.  currently, we support BTC, ETH, and XRP
            + `btc` (number)
            + `eth` (number)
            + `xrp` (number)
        + `currency` (string) - the currency which customer wants to get a loan in (i.e. USD)
        + `interest_rate_rebates` (object) - the type and number of utility token to stake for discounted C-LOC interest rate
            + `currency` (string) - type of utiltiy token for staking (i.e. LBA)
            + `percentage` (number) - percentage of total loan amount for staking
        + `tenor_in_months` (number) - loan term in number of months
        + `expiration_date` (string) - timestamp on when the C-LOC quote would expire

    + Body
    
            {  
                "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "status":"PENDING",
                "msg":"",
                "credit_line":0,
                "currency":"USD",
                "annual_interest_percent":0,
                "tenor_in_months":36,
                "daily_withdrawal_limit":0,
                "over_limit_allowance_amount":0,
                "over_limit_allowance_count_per_billing":0,
                "fees":{  
                    "annual_fee":0,
                    "origination_fee_in_percentage":0,
                    "administrative_fee":0,
                    "late_fee":0,
                    "over_limit_fee":0,
                    "returned_payment_fee":0,
                    "exchange_fee_in_percentage":0
                },
                "collateral":{  
                    "btc":2,
                    "eth":1,
                    "xrp":0
                },
                "discount":0,
                "interest_rate_rebates":[  
                    {  
                        "currency":"LBA",
                        "percentage":1
                    }
                ],
                "expiration_date":"2018-11-28T12:17:50.475+0000"
            }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### Get quote [GET/api/v1/users/uid/quotes/quoteId]  
Retrieve C-LOC quote status (i.e. approved, expired etc) and details using the quoteID returned from POST

+ Parameters:

    + `uid` (string) - User uid issued by CRED
    + `quoteId` (string) - quoteId issued by cred during quote create request.

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {  
            "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "status":"APPROVED",
            "msg":"",
            "credit_line":2637.742,
            "currency":"USD",
            "annual_interest_percent":14,
            "tenor_in_months":36,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":100,
            "over_limit_allowance_count_per_billing":3,
            "fees":{  
                "annual_fee":0,
                "origination_fee_in_percentage":3,
                "administrative_fee":0,
                "late_fee":39,
                "over_limit_fee":29,
                "returned_payment_fee":30,
                "exchange_fee_in_percentage":1
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "discount":1,
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "expiration_date":"2018-11-28T15:18:04.000+0000"
        }
        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
   
### Get all user quotes [GET/api/v1/users/{uid}/quotes/]  

Request all the quotes for a specific user 

+ Parameters:

    + `uid` (string) - User uid issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "status":"PENDING",
                    "msg":"",
                    "credit_line":0,
                    "currency":"USD",
                    "annual_interest_percent":0,
                    "tenor_in_months":36,
                    "daily_withdrawal_limit":0,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee_in_percentage":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "discount":0,
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "expiration_date":"2018-11-28T12:17:50.475+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
   

## C-LOC [/cloc]            
            
### Create C-LOC [POST/api/v1/users/{uid}/cloc] 

This API is responsible for loan account origination and is based on acceptance of previously shared official quote, captured borrower’s e-signature on Cred’s loan agreement and successful transfer of crypto collateral.  Before collateral is received in Cred’s custody, borrower’s C-LOC account will be in ‘pend’ state.  Once receipt of collateral is confirmed the status of C-LOC account will be updated to ‘active’.  See below Get C-LOC API for C-LOC account status inquiry call. 

+ Parameters

    + `uid` (string)- User uid issued by CRED  


+ Request (application/json)

    + Attributes
        + `esignature` (string) - concatenation of IP address and timestamp when user signs the loan agreement.  This is used as official e-signature for the C-LOC agreement.
        + `funding_method` - contains all the details for asset transfer
            + `collateral` (object) - contains details on collateral to be pledged to obtain C-LOC
                + `currency` (string) - cryptocurrency type to be used for collateral (BTC, ETH, XRP)
                + `ref_id` (string) - reference ID of source wallet address for collateral (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the collateral (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `stake` (object) - contains details on utility tokens to be held for the discounted interest rate
                + `currency` (string) - utility token (LBA)
                + `ref_id` (string) - reference ID of source wallet address for utility tokens (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the reserved tokens (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `destination account` (object) - contains details for withdrawal account
                + `currency` (string) - currency for withdrawal for the C-LOC
                + `ref_id` (string) - reference ID of customer's withdrawal account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for disbursing fiat for C-LOC withdrawal (i.e ONUS, ACH, DEBITCARD, SEPA)
            + `source account` (object) - contains details for repayment account
                + `currency` (string) - currency for C-LOC repayment
                + `ref_id` (string) - reference ID of customer's repayment account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for repayment (i.e ONUS, ACH, DEBITCARD, SEPA)
        + `quote_id` (string) - quote ID returned from Cred upon C-LOC quote creation

    + Body  
    
            {  
                "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000",
                "funding_method":{  
                    "collateral":[  
                        {  
                            "currency":"BTC",
                            "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"CRED"
                        }
                    ],
                    "stake":[  
                        {  
                            "currency":"LBA",
                            "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"CRED"
                        }
                    ]
                    "destination_account":{  
                        "currency":"USD",
                        "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"DEBITCARD"
                    },
                    "source_account":{  
                        "currency":"USD",
                        "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"ACH"
                    },
                },
                "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434"
            }

            

            
+ Response 200 (applicantion/json)
    + Attributes 
        + `id` (string) - C-LOC id generated for reference
        + `uid` (string) - the user ID submitted in the create C-LOC request
        + `quote_id` (string) - the quote id as it relates to this specific C-LOC agreement
        + `status` (string) - status of C-LOC account (PENDING, ACTIVE, SUSPENDED)
        + `msg` (string) - additional message for notes if the C-LOC account is SUSPENDED
        + `credit_line` (number) - credit line amount for the C-LOC account
        + `annual_interest_percent` (number) - interest rate for this C-LOC account
        + `discount` (number) - discounted interest rate for this C-LOC account
        + `tenor_in_months` (number) - the duration of the C-LOC account in months
        + `origination_date` (string) - the date when collateral was received and C-LOC account was created
        + `available_credit` (number) - the total amount of funds avaiable for withdrawal
        + `ltv` (number) - loan to value ratio for the type of collteral pledged
        + `maintenace_ltv` (number) - loan to value ratio at which the C-LOC must remain to not trigger default notification
        + `annual_interest_percent` (number) - 
        + `daily_withdrawal_limit` (number) - the daily maximum amount of funds allowed for withdrawal
        + `over_limit_allowance_amount` (number) - tolerance for over limit withdrawal 
        + `over_limit_allowance_count_per_billing` (number) - number of times allowed for over withdrawal per billing cycle
        + `billing_cycle` (string) - MONTH
        + `accounting_standing` (number) -
        + `outstanding_balance` (number) -
        + `principal_standing` (number) -
        + `total_charges` (number) -
        + `current_cycle_interest` (number) -
        + `current_cycle_fees` (number) -
        + `net_current_charges` (number) -
        + `minimum_payment_due_date`(string) - 
        + `billed_interest`(string) - 
        + `billed_fees`(string) - 
        + `net_billed_charges`(string) - 
        + `funding_method` - contains all the details for asset transfer
            + `collateral` (object) - contains details on collateral to be pledged to obtain C-LOC
                + `currency` (string) - cryptocurrency type to be used for collateral (BTC, ETH, XRP)
                + `ref_id` (string) - reference ID of source wallet address for collateral (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the collateral (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `stake` (object) - contains details on utility tokens to be held for the discounted interest rate
                + `currency` (string) - utility token (LBA)
                + `ref_id` (string) - reference ID of source wallet address for utility tokens (i.e. public wallet address or other reference)
                + `transfer_method` (string) - method of cryptocurrency transfer for the reserved tokens (i.e CRED, ONUS, ACH, DEBITCARD, SEPA)
            + `destination account` (object) - contains details for withdrawal account
                + `currency` (string) - currency for withdrawal for the C-LOC
                + `ref_id` (string) - reference ID of customer's withdrawal account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for disbursing fiat for C-LOC withdrawal (i.e ONUS, ACH, DEBITCARD, SEPA)
            + `source account` (object) - contains details for repayment account
                + `currency` (string) - currency for C-LOC repayment
                + `ref_id` (string) - reference ID of customer's repayment account (i.e. bank account number, debit card number)
                + `transfer_method` (string) - method for repayment (i.e ONUS, ACH, DEBITCARD, SEPA) 
        + `fees` (object) 
                + `annual_fee` (number)
                + `origination_fee` (number)
                + `administrative_fee` (number)
                + `late_fee` (number)
                + `over_limit_fee` (number)
                + `returned_payment_fee` (number)
                + `exchange_fee_in_percentage` (number) 
        + `collateral` (object)  
                + `btc` (number)
                + `eth` (number)
                + `xrp` (number)
        + `interest_rate_rebates` (object)
                + `currency` (string) - LBA
                + "percentage` (number)
        + `booking_information` (object) 
                + `country`(string) - US
                + `currency` (string) - USD
                + `timezone` (string) - EST
        + `esignature` (string) - 
           
    + Body
    
            {  
                "id":"f92a6141-c567-469f-af47-d66457722762",
                "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                "status":"PENDING",
                 "msg":"",
                "credit_line":200000,
                "annual_interest_percent":9,
                "discount":1,
                "tenor_in_months":36,
                "origination_date":"2018-11-28T13:59:16.848+0000",
                "available_credit":20000,
                "ltv":0.5,
                "maintenance_ltv":0.7,
                "daily_withdrawal_limit":7500,
                "over_limit_allowance_amount":100,
                "over_limit_allowance_count_per_billing":3,
                "billing_cycle":"MONTH",
                "account_standing":0,
                "outstanding_balance":0,
                "principal_outstanding":0,
                "total_charges":0,
                "current_cycle_interest":0,
                "current_cycle_fees":0,
                "net_current_charges":0,
                "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
                "billed_interest":0,
                "billed_fees":0,
                "net_billed_charges":0,
                "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
            }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
            
### Get C-LOC [GET/api/v1/users/{uid}/cloc/{clocId}]  

Get C-LOC account information by id for a given user

+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `clocId` (string) - c-loc account id issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"CRED"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"DEBITCARD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get active C-LOC account [GET/api/v1/users/{uid}/cloc/active]  

Get active C-LOC account for a given user id (uid)

+ Parameters

    + `uid` (string) - User uid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"CRED"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"DEBITCARD"
                },
                
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all user C-LOC accounts [GET/api/v1/users/uid/cloc]  

Get all C-LOC accounts for a given user id (uid)

+ Parameters:

    + `uid` (string) - User uid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"f92a6141-c567-469f-af47-d66457722762",
                    "uid":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "status":"ACTIVE",
                    "msg":"",
                    "credit_line":2637.742,
                    "annual_interest_percent":15,
                    "discount":0,
                    "tenor_in_months":36,
                    "origination_date":"2018-11-28T14:03:43.716+0000",
                    "available_credit":2637.742,
                    "ltv":0,
                    "maintenance_ltv":0,
                    "daily_withdrawal_limit":7500,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "billing_cycle":"MONTH",
                    "account_standing":0,
                    "outstanding_balance":0,
                    "principal_outstanding":0,
                    "total_charges":0,
                    "current_cycle_interest":0,
                    "current_cycle_fees":0,
                    "net_current_charges":0,
                    "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
                    "billed_interest":0,
                    "billed_fees":0,
                    "net_billed_charges":0,
                    "funding_method":{  
                        "collateral":[  
                            {  
                                "currency":"BTC",
                                "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"CRED"
                            }
                        ],
                        "stake":[  
                            {  
                                "currency":"LBA",
                                "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"DEBITCARD"
                            }
                        ],
                        "destination_account":{  
                            "currency":"USD",
                            "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"CRED"
                        },
                        "source_account":{  
                            "currency":"USD",
                            "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"DEBITCARD"
                        },
                        
                    },
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "booking_information":{  
                        "country": "US",
                        "currency": "USD",
                        "timezone": "EST"
                    },
                    "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

## Authorization [/transactions]    

Every credit line transaction, be it a withdrawal or a repayment, is always preceded by what is called authorization.  CredX authorization service is a form of approval process, adjudicating availability of funds on borrower’s C-LOC account along with other important account conditions before submitted transaction is permitted to settle.
            
### Create withdraw authorization [POST/api/v1/users/{uid}/cloc/{clocId}/transaction/]  
Calling this API will trigger an array of dynamic CredX rule sets responsible for adjudicating a withdrawal request.  A withdrawal request is defined as an individual draw on a C-LOC account by an authorized user (ie borrower).  It will take another call to make (Get authorization API, see below) to find out whether a Withdrawal authorization request was approved or declined.  All approved withdrawal authorizations will be queued for further settlement (i.e. transfer from Cred’s issued C-LOC account to borrower’s designated destination account).  CredX settlement service functions as a gateway and is integrated with a variety of global and local clearing and settlement mechanisms (such as ACH, Debit Card, Sepa, various crypto wallets and other). 

+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `clocId` (string) - C-LOC id issued by cred upon C-LOC creation
+ Request (application/json)

    + Attributes
        + `amount` (number) - Amount to be withdrawal from C-LOC account  
        + `notes` (string) - optional note
        + `destination_account` (object)
            + `currency` (string) - currency of the withdrawal funds
            + `ref_id` (string) - reference id of the account to transfer to withdrawal amount into
            + `transfer_method` (string) - method for withdrawal (i.e ONUS, ACH, DEBITCARD, SEPA)
            
    + Body

            {  
                "amount":1000,
                "notes":"Sample withdrawal",
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "transfer_method":"DEBITCARD"
                }
            }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "DEBITCARD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Get authorization [GET/api/v1/users/uid/cloc/clocId/transactions/transactionId]  

+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `transactionId` (string) - Transaction id issued by cred after transaction request.
    + `clocId` (string) - C-LOC id issued by cred upon C-LOC creation


+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "currency": "USD",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "DEBITCARD",
                "currency": "USD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [{
                    "representment_date": "2018-11-11T21:45:00.367Z",
                    "status": "SUCCESS"
                }],
                "settled_date": "2018-11-11T21:45:00.367Z",
                "status": "SUCCESS"
            },
            "status": "SUCCESS",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }


+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Create repayment authorization [POST/api/v1/users/uid/cloc/clocId/repayment/]  
Calling this API will trigger an array of dynamic CredX rule sets responsible for adjudicating a repayment request.  A repayment request is defined as an expressed intent to pay down or pay off a C-LOC account initiated by an authorized user (ie borrower).  It will take another call to make (see Get Authorization API) to find out whether a repayment authorization request was approved or declined.  All approved repayment authorizations will be queued for further settlement (i.e. transfer from borrower’s designated source account to Cred’s issued C-LOC account).  CredX settlement service functions as a gateway and is integrated to a variety of global and local clearing and settlement mechanisms (such as ACH, Debit Card, Sepa, various crypto wallets and other).    

+ Parameters:

    + `uid` (string) - User uid issued by CRED  
    + `clocId` (string) - C-LOC id issued by cred upon C-LOC creation

+ Request (application/json)

        {  
            "amount":1000,
            "notes":"Sample Repayment",
            "source_account":{  
                "currency":"USD",
                "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "transfer_method":"DEBITCARD"
            }
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "DEBITCARD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "REPAYMENT",
            "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all C-LOC transactions [GET/api/v1/users/uid/cloc/clocId/transactions]  

+ Parameters:

    + `uid` (string)- User uid issued by CRED  
    + `clocId` (string) - c-loc id issued by cred after c-loc creation

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+ Response 200 (application/json)

        {
            "content": [
                {
                    "amount": 1000,
                    "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
                    "currency": "USD",
                    "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
                    "msg": "",
                    "notes": "Withdrawal request",
                    "destination_account": {
                        "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                        "transfer_method": "DEBITCARD",
                        "currency": "USD"
                    },
                    "settlement_info": {
                        "created_date": "2018-11-11T21:45:00.367Z",
                        "representments": [{
                            "representment_date": "2018-11-11T21:45:00.367Z",
                            "status": "SUCCESS"
                        }],
                        "settled_date": "2018-11-11T21:45:00.367Z",
                        "status": "SUCCESS"
                    },
                    "status": "SUCCESS",
                    "transaction_date": "2018-11-11T21:45:00.367Z",
                    "type": "WITHDRAWAL",
                    "uid": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
FORMAT: 1A
HOST: https://api.mycred.io

# CRED CLaaS API

API documentation for CRED CRYPTO Lending as a service API

## Loan proposition  [/ltv]

### Get LTV calculator [GET/api/v1/ltv/{partnerid}]

Cred offers various customized CLOC programs to meet the needs and requirements for each partner based on business arrangements.  A detailed loan proposition is returned to you with all the details you need to present to your customers
in the  format that is best suited for your application.

+ Parameters

    + `partnerid` - Partner ID issued by CRED  
    
+ Attributes
    + `currency` (string) - currency of the CLOC 
    + `max_credit` (number) - maximum amount for CLOC offer
    + `min_credit` (number) - minimum amount for CLOC offer
    + `interet_rates` (object) - This is list of interest profiles for the CLOC available for the partner  
        + `borrower_residence` (string) - US or non-US
        + `tenor_in_months` (number) - the duration of loan term  
        + `rate` (number) - interest rate in percentage
        + `discounts` (object) -  discounted interest rate given to borrower who holds specific amount of utility reservse (currency) at the time of loan origination.  The interest rate would be lowered by discount_step in percentage with each 1% of the utility reserve held.  The discount range is defined by min_discount and max_discount.  For example, for US borrower, they can hold LBA of at least 1% of the principal value of the loan at the time of origination to benefit from reduced interest rate from 12% to 11%.  Borrower can hold up to 3% of LBA of loan amount to get the optimal discounted rate of 9% for their loan. 
            + `discounts: currency` (string) 
            + `min_discount: currency` (string)
            + `max_discount: currency` (string)
            + `discount_step: currency` (string)
    + `eth_ltv` (number) - loan to value ratio for Etherum as collateral
    + `btc_ltv` (number) - loan to value ratio for Bitcoin as collateral
    + `xrp_ltv` (number) - loan to value ratio for Ripple as collateralpdate
    
+ Request

    + Headers

            Authorization: None

+ Response 200 (application/json)

        [  
            {  
                "currency":"USD",
                "max_credit":200000,
                "min_credit":2000,
                "interest_rates":[  
                    {  
                        "borrower_residence":"US",
                        "tenor_in_months":36,
                        "rate":12,
                        "discounts":[  
                            {  
                                "currency":"LBA",
                                "min_discount":1,
                                "max_discount":3,
                                "discount_step":1
                            }
                        ]
                    },
                    {  
                        "borrower_residence":"NON-US",
                        "tenor_in_months":36,
                        "rate":15,
                        "discounts":[  
                            {  
                                "currency":"LBA",
                                "min_discount":1,
                                "max_discount":6,
                                "discount_step":1
                            }
                        ]
                    }
                ],
                "eth_ltv":0.50,
                "btc_ltv":0.50,
                "xrp_ltv":0.50,
                "fees_response": {
                    "administrative_fee":0,
                    "annual_fee":0,
                    "exchange_fee_in_percentage":0,
                    "late_fee":0,
                    "origination_fee_in_percentage":0,
                    "over_limit_fee":0,
                    "returned_payment_fee":0
                },
                "daily_withdrawal_limit": 0,
            }
        ]
            
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Fair Market Value of coins [GET/api/v1/oracle/fmv?{convert}=USD&{numberOfCoins}=1&{symbol}=ETH]

The crypto assets' Fair Market Value (FMV) allows you to calculate the estimated loan amount to be made available to the borrowers


+ Parameters

    + convert (required) - Legal money symbol which you want convert to
    + numberOfCoins (required) - Number of coins
    + symbol (required) - Coin symbol

+ Request

    + Headers

            Authorization: None

+ Response 200 (application/json)

        {
            "symbol": "ETH",
            "convert": "USD",
            "number_of_coins": 1,
            "fair_market_value": 113.583
        }


+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
## Users [/users]

User onboarding and management with CRED platform.

### User signup [POST/api/v1/users] 

The Sign-Up API is the first step to customer onboarding to collect their basic account information.  This returns a unqiue identifier for each user.  The user_id should be kept on the partner's system for future reference or inquiry for a specific user/account



+ Request (application/json)

        {
            "country_code": "+1",
            "mobile_number": "4156089756",
            "partner_user_uuid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "tc_enabled": "true",
            "user_name": "john@mycred.io"
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {
            "uuid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "user_name": "john@mycred.io",
            "country_code":"+1",
            "mobile_number": "4153579089",
            "tc_enabled": "true",
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_uuid":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            }
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
 
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### User KYC [POST/api/v1/users/uuid/kyc] 

The KYC API collects the member’s PIIs for Cred to fulfill our KYC requirements.  Cred is required to perform our own KYC for each CLOC customer. Partner should only allow member to move forward with C-LOC application if both account status and kyc status are in good standing.

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED   

+ Request (application/json)

        {
            "first_name": "John",
            "last_name": "Doe",
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "dob":"12/31/91",
            "document_id":"3456",
            "resident": "US" 
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "uuid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "first_name": "John",
            "last_name": "Doe",
            "status": "enabled",
            "kyc": {
                "status": "PENDING"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"+1",
            "tc_enabled": "true",
            "dob":"12/31/91",
            "user_name": "john@mycred.io",
            "resident": "US"   
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
### User KYC Document verification [POST/api/v1/users/uuid/kyc/verify/documents] 

Customer to submit goverment ID to check for autheticity validation.  This is a part of the KYC service.
+ Parameters:

    + `uuid` (string) - User uuid issued by CRED   
    + `country_code` (string) - country code of the ID document issuing country 
    + `document_type` (string) - type of document for upload (DriverLicense, Passport, NatoinalID)
    + `document_front_image` (base64imaagestring)
    + `document_back_image` (base64imagestring)

+ Request (application/json)

        {
            {
            
            "country_code": "US",
            "data_fields": {
                "document": {
                  "document_type": "DriverLicense",
                  "document_front_image": "base64imagestring",
                  "document_back_image": "base64imagestring",
                            }
                            }
            }
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "id": "H4a44579-c996-4e30-a7c1-879r",
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get user [GET/api/v1/users/uuid]  

The user's account status is updated throughout the lifecycle of the account.  This API is used to get the most up-to-date status of the user account.


+ Parameters:

    + `uuid` (string) - user uuid issued by CRED 
    

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
            
+   Response 200 (application/json)

        {
            "uuid": "d4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "first_name": "John",
            "last_name": "Doe",
            "status": "enabled",
            "kyc": {
                "status": "pending"
            },
            "address": {
                "line1": "487 Cumber Lane",
                "line2": "Block 5",
                "state": "CA",
                "zip": "94105",
                "country": "USA"
            },
            "partner_details": {
                "partner_name":"uphold",
                "partner_user_id":"d4a44579-c996-4e30-a7c1-06245f1eb1fb"
            },
            "mobile": "4150689089",
            "country_code":"+1",
            "tc_enabled": "true",
            "dob":"12/31/91",
            "user_name": "john@mycred.io",
            "resident": "US"   
        }

        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
             
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
         
            
## Quotes [/quotes]

Based on the details of collateral available, Cred generates the CLOC quote for the user.  The CLOC quote has an expiration of 3 hours from the time it is issued. The customer must AGREE to the loan agree to proceed furhter.


### Create quote request [POST/api/v1/users/uuid/quotes]  

Based on the available collateral, a time limited CLOC quote is generated for the borrower. 

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED

+ Request (application/json)

        {  
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "currency":"USD",
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "tenor_in_months":36
        }
        
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {  
            "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "status":"PENDING",
            "msg":"",
            "credit_line":0,
            "currency":"USD",
            "annual_interest_percent":0,
            "tenor_in_months":36,
            "daily_withdrawal_limit":0,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "fees":{  
                "annual_fee":0,
                "origination_fee_in_percentage":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "discount":0,
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "expiration_date":"2018-11-28T12:17:50.475+0000"
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### Get quote [GET/api/v1/users/uuid/quotes/quoteId]  
Retrieve CLOC quote status (i.e. approved, expired etc) and details

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED
    + `quoteId` (string) - quoteId issued by cred during quote create request.

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {  
            "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "status":"APPROVED",
            "msg":"",
            "credit_line":2637.742,
            "currency":"USD",
            "annual_interest_percent":14,
            "tenor_in_months":36,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":100,
            "over_limit_allowance_count_per_billing":3,
            "fees":{  
                "annual_fee":0,
                "origination_fee_in_percentage":3,
                "administrative_fee":250,
                "late_fee":39,
                "over_limit_fee":29,
                "returned_payment_fee":30,
                "exchange_fee_in_percentage":1
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "discount":1,
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "expiration_date":"2018-11-28T15:18:04.000+0000"
        }
        
+ Response 401

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400

        {
            "error": "Bad request",
            "code" : "400"
        }
   
### Get all user quotes [GET/api/v1/users/uuid/quotes/]  

Request quote based on quote id.

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+   Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "status":"PENDING",
                    "msg":"",
                    "credit_line":0,
                    "currency":"USD",
                    "annual_interest_percent":0,
                    "tenor_in_months":36,
                    "daily_withdrawal_limit":0,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee_in_percentage":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "discount":0,
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "expiration_date":"2018-11-28T12:17:50.475+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
   

## CLOC [/cloc]            
            
### Create CLOC request [POST/api/v1/users/uuid/cloc] 

Request for creation of CLOC account for a given user uuid.

+ Parameters:

    + `uuid` (string)- User uuid issued by CRED  

+ Request (application/json)

        {  
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000",
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ]
            },
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434"
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"PENDING",
            "msg":"",
            "credit_line":0,
            "annual_interest_percent":0,
            "discount":0,
            "tenor_in_months":0,
            "origination_date":"2018-11-28T13:59:16.848+0000",
            "available_credit":0,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":0,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }
        
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
            
### Get CLOC [GET/api/v1/users/uuid/cloc/clocId]  

Get CLOC account information by id for a given user

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `clocId` (string) - cloc account id issued by CRED

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get active CLOC account [GET/api/v1/users/uuid/cloc/active]  

Get active CLOC account for a given user uuid

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {  
            "id":"f92a6141-c567-469f-af47-d66457722762",
            "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
            "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
            "status":"ACTIVE",
            "msg":"",
            "credit_line":2637.742,
            "annual_interest_percent":15,
            "discount":0,
            "tenor_in_months":36,
            "origination_date":"2018-11-28T14:03:43.716+0000",
            "available_credit":2637.742,
            "ltv":0,
            "maintenance_ltv":0,
            "daily_withdrawal_limit":7500,
            "over_limit_allowance_amount":0,
            "over_limit_allowance_count_per_billing":0,
            "billing_cycle":"MONTH",
            "account_standing":0,
            "outstanding_balance":0,
            "principal_outstanding":0,
            "total_charges":0,
            "current_cycle_interest":0,
            "current_cycle_fees":0,
            "net_current_charges":0,
            "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
            "billed_interest":0,
            "billed_fees":0,
            "net_billed_charges":0,
            "funding_method":{  
                "collateral":[  
                    {  
                        "currency":"BTC",
                        "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ],
                "destination_account":{  
                    "currency":"USD",
                    "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "source_account":{  
                    "currency":"USD",
                    "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                    "transfer_method":"UPHOLD"
                },
                "stake":[  
                    {  
                        "currency":"LBA",
                        "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                        "transfer_method":"UPHOLD"
                    }
                ]
            },
            "fees":{  
                "annual_fee":0,
                "origination_fee":0,
                "administrative_fee":0,
                "late_fee":0,
                "over_limit_fee":0,
                "returned_payment_fee":0,
                "exchange_fee_in_percentage":0
            },
            "collateral":{  
                "btc":2,
                "eth":1,
                "xrp":0
            },
            "interest_rate_rebates":[  
                {  
                    "currency":"LBA",
                    "percentage":1
                }
            ],
            "booking_information":{  
                "country": "US",
                "currency": "USD",
                "timezone": "EST"
            },
            "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all user CLOC accounts [GET/api/v1/users/uuid/cloc]  

Get all CLOC accounts for a given user uuid

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
   
+ Response 200 (application/json)

        {
            "content": [
                {  
                    "id":"f92a6141-c567-469f-af47-d66457722762",
                    "user_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                    "quote_id":"461022b1-9875-437c-b83f-6bc4c6e64434",
                    "status":"ACTIVE",
                    "msg":"",
                    "credit_line":2637.742,
                    "annual_interest_percent":15,
                    "discount":0,
                    "tenor_in_months":36,
                    "origination_date":"2018-11-28T14:03:43.716+0000",
                    "available_credit":2637.742,
                    "ltv":0,
                    "maintenance_ltv":0,
                    "daily_withdrawal_limit":7500,
                    "over_limit_allowance_amount":0,
                    "over_limit_allowance_count_per_billing":0,
                    "billing_cycle":"MONTH",
                    "account_standing":0,
                    "outstanding_balance":0,
                    "principal_outstanding":0,
                    "total_charges":0,
                    "current_cycle_interest":0,
                    "current_cycle_fees":0,
                    "net_current_charges":0,
                    "minimum_payment_due_date":"2018-11-28T13:59:16.848+0000",
                    "billed_interest":0,
                    "billed_fees":0,
                    "net_billed_charges":0,
                    "funding_method":{  
                        "collateral":[  
                            {  
                                "currency":"BTC",
                                "ref_id":"82b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"UPHOLD"
                            }
                        ],
                        "destination_account":{  
                            "currency":"USD",
                            "ref_id":"92b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"UPHOLD"
                        },
                        "source_account":{  
                            "currency":"USD",
                            "ref_id":"11b27574-9637-4156-9202-9657442ceffd",
                            "transfer_method":"UPHOLD"
                        },
                        "stake":[  
                            {  
                                "currency":"LBA",
                                "ref_id":"89b27574-9637-4156-9202-9657442ceffd",
                                "transfer_method":"UPHOLD"
                            }
                        ]
                    },
                    "fees":{  
                        "annual_fee":0,
                        "origination_fee":0,
                        "administrative_fee":0,
                        "late_fee":0,
                        "over_limit_fee":0,
                        "returned_payment_fee":0,
                        "exchange_fee_in_percentage":0
                    },
                    "collateral":{  
                        "btc":2,
                        "eth":1,
                        "xrp":0
                    },
                    "interest_rate_rebates":[  
                        {  
                            "currency":"LBA",
                            "percentage":1
                        }
                    ],
                    "booking_information":{  
                        "country": "US",
                        "currency": "USD",
                        "timezone": "EST"
                    },
                    "esignature":"34.234.234.23-2018-11-11T20:45:55.000+0000"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

## Transactions [/transactions]            
            
### Create withdraw authorization [POST/api/v1/users/uuid/cloc/clocId/transaction/]  

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `clocId` (string) - CLOC id issued by cred after cloc CLOC

+ Request (application/json)

        {  
            "amount":1000,
            "notes":"Sample withdrawal",
            "destination_account":{  
                "currency":"USD",
                "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "transfer_method":"UPHOLD"
            }
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "UPHOLD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Get transaction [GET/api/v1/users/uuid/cloc/clocId/transactions/transactionId]  

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `transactionId` (string) - Transaction id issued by cred after transaction request.
    + `clocId` (string) - CLOC id issued by cred after cloc creation


+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "currency": "USD",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "UPHOLD",
                "currency": "USD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [{
                    "representment_date": "2018-11-11T21:45:00.367Z",
                    "status": "SUCCESS"
                }],
                "settled_date": "2018-11-11T21:45:00.367Z",
                "status": "SUCCESS"
            },
            "status": "SUCCESS",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "WITHDRAWAL",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }


+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Create repayment authorization [POST/api/v1/users/uuid/cloc/clocId/repayment/]  

+ Parameters:

    + `uuid` (string) - User uuid issued by CRED  
    + `clocId` (string) - CLOC id issued by cred after cloc CLOC

+ Request (application/json)

        {  
            "amount":1000,
            "notes":"Sample Repayment",
            "source_account":{  
                "currency":"USD",
                "ref_id":"c61fbb14-64f3-4693-b904-f799ff1dd84a",
                "transfer_method":"UPHOLD"
            }
        }

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
        
+ Response 200 (application/json)

        {
            "amount": 1000,
            "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
            "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
            "msg": "",
            "notes": "Withdrawal request",
            "destination_account": {
                "currency": "USD",
                "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                "transfer_method": "UPHOLD"
            },
            "settlement_info": {
                "created_date": "2018-11-11T21:45:00.367Z",
                "representments": [],
                "settled_date": "",
                "status": "PENDING"
            },
            "status": "PENDING",
            "transaction_date": "2018-11-11T21:45:00.367Z",
            "type": "REPAYMENT",
            "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }


### Get all CLOC transactions [GET/api/v1/users/uuid/cloc/clocId/transactions]  

+ Parameters:

    + `uuid` (string)- User uuid issued by CRED  
    + `clocId` (string) - cloc id issued by cred after cloc creation

+ Request (application/json)

    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            

+ Response 200 (application/json)

        {
            "content": [
                {
                    "amount": 1000,
                    "cloc_id": "3db06b74-091d-49d7-9fcf-21366c646ac5",
                    "currency": "USD",
                    "id": "992833a1-44c1-4b0a-9eba-b4b6c88b6e15",
                    "msg": "",
                    "notes": "Withdrawal request",
                    "destination_account": {
                        "ref_id": "a2ebfc23-69cb-4b12-bde1-089ef0db1321",
                        "transfer_method": "UPHOLD",
                        "currency": "USD"
                    },
                    "settlement_info": {
                        "created_date": "2018-11-11T21:45:00.367Z",
                        "representments": [{
                            "representment_date": "2018-11-11T21:45:00.367Z",
                            "status": "SUCCESS"
                        }],
                        "settled_date": "2018-11-11T21:45:00.367Z",
                        "status": "SUCCESS"
                    },
                    "status": "SUCCESS",
                    "transaction_date": "2018-11-11T21:45:00.367Z",
                    "type": "WITHDRAWAL",
                    "user_id": "c4a44579-c996-4e30-a7c1-06245f1eb1fb"
                }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }

+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
## Wallets [/wallets]

### Get Deposit Address [GET /api/v1/users/user_id/wallet/addresses]

Return deposit address for specified coin and user.
Note this will create a new wallet address if the user passed KYC and conduct deposit for the very first time.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
    + `coin_type` (string) - What coin address required,e.g.,BTC,ETH
    
+ Request (application/json)
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
            
+ Response 200 (application/json)

        {
            "userId":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "success":true,
            "address":[
                {
                    "type":"BTC",
                    "address":"17w8vcx68vmAkcTDzEc2bMms6UaiA6mGui"
                },
                {
                    "type":"ETH",
                    "address":"0xfe5f141bf94fe84bc28ded0ab966c16b17490657"
                },
                {
                    "type":"LBA",
                    "address":"0xfe5f141bf94fe84bc28ded0ab966c16b17490657"
                }
            ]
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
           
### Get Wallet Balance [GET /api/v1/users/user_id/wallet/balances]

Return wallet balances for given user.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED

+ Request (application/json)
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "userId":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "success":true,
            "balances":[
                {
                    "type":"BTC",
                    "available":1.434343,
                    "collateralized":0.5,
                    "pending_confirm":1,
                    "staked":0,
                    "address":"17w8vcx68vmAkcTDzEc2bMms6UaiA6mGui"
                },
                {
                    "type":"ETH",
                    "available":1.434343,
                    "collateralized":0.5,
                    "pending_confirm":1,
                    "staked":0,
                    "address":"0xfe5f141bf94fe84bc28ded0ab966c16b17490657"
                },
                {
                    "type":"LBA",
                    "available":1001123.132,
                    "collateralized":0.5,
                    "pending_confirm":1,
                    "staked": 1000,
                    "address":"0xfe5f141bf94fe84bc28ded0ab966c16b17490657"
                }
            ]
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
### Transfer Coin [POST /api/v1/users/user_id/wallet/transfer/transfer_id]

Apply transfer operation to coin which is already sucessfully deposit but not used, i.e., "available" as returned by above API.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
    + `transfer_id` (string) - invoker to ensure unique transfer id from business perspective
    
+ Request (application/json)

        {
            "transferType":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
            "coinType":"ETH/LBA/BTC",
            "amount":100.121212212121,
            "withdrawTo":"0xfe5f141bf94fe84bc28ded0ab966c16b17490657"
        }
    
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "success": true,
            "userId":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "coinType":"ETH",
            "transferType":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
            "transferId":"biz123"
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }
        
        
### Get Transfer Status [GET /api/v1/users/user_id/wallet/transfer/transfer_id]

Return the status of given user and transfer operation id.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
    + `transfer_id` (string) - invoker to ensure unique transfer id from business perspective

+ Request (application/json)
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {
            "status":"SUBMITTED/PENDING/SUCCESS/FAILED",
            "userId": "c4a44579-c996-4e30-a7c1-06245f1eb1fb",
            "transferId":"biz123",
            "transferType":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE",
            "amount":123.412,
            "coinType":"ETH",
            "blockchainTx":"0x7e669efaba276cf087a44d153b789134e565b594b90a2892107ba57e74fb66bf",
            "blockchainConfirmations":20,
            "blockchainConfirmationsRequired":36
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        }

### Get Transfer History [GET /api/v1/users/user_id/wallet/history]

Return full transfer history for given user.

+ Parameters:
    + `user_id` (string) - user identifier issued by CRED
   
+ Request (application/json)
    + Headers

            Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

+ Response 200 (application/json)

        {            
            "content": 
            [
                  {
                    "status":"SUBMITTED/PENDING/SUCCESS",
                    "userId":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
                    "transferId":"biz123",
                    "transferType":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE/RECHARGE",
                    "amount":123.412,
                    "coinType":"ETH",
                    "blockchainTx":"0x7e669efaba276cf087a44d153b789134e565b594b90a2892107ba57e74fb66bf",
                    "blockchainConfirmations":20,
                    "blockchainConfirmationsRequired":36
                  },
                  {
                    "status":"SUBMITTED/PENDING/SUCCESS",
                    "userId":"c4a44579-c996-4e30-a7c1-06245f1eb1fb",
                    "transferId":"biz124",
                    "transferType":"WITHDRAWAL/COLLATERALIZE/UNCOLLATERALIZE/STAKE/UNSTAKE/RECHARGE",
                    "amount":123.512,
                    "coinType":"ETH",
                    "blockchainTx":"0x9971205df9603993c4484f03a83da34d6915329bc75237904fcdb722a2df2a09",
                    "blockchainConfirmations":20,
                    "blockchainConfirmationsRequired":36
                  }
            ],
            "pageable": {
                "sort": {
                    "unsorted": true,
                    "sorted": false
                },
                "page_number": 0,
                "page_size": 20,
                "offset": 0,
                "paged": true,
                "unpaged": false
            },
            "total_pages": 1,
            "last": true,
            "total_elements": 1,
            "first": true,
            "sort": {
                "unsorted": true,
                "sorted": false
            },
            "number_of_elements": 1,
            "size": 20,
            "number": 0
        }
    
+ Response 401 (application/json)

        {
            "error": "Un-Authorized",
            "code" : "001"
        }
        
+ Response 400 (application/json)

        {
            "error": "Bad request",
            "code" : "400"
        } 
           


